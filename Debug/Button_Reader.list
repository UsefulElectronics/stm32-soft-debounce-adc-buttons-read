
Button_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e20  08003e20  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e20  08003e20  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e20  08003e20  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000001c  08003e44  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003e44  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc1b  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c6e  00000000  00000000  0002cc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  0002e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  0002f708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176e8  00000000  00000000  00030480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afbe  00000000  00000000  00047b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bb76  00000000  00000000  00052b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de69c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c80  00000000  00000000  000de718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ddc 	.word	0x08003ddc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003ddc 	.word	0x08003ddc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SoundTest_t			hSoundLevelTest;

	Pcf7584Control_t	hIndicator;

	hMenuButton.buttonFlag.data 		= RESET;			//Flag reset
 8000152:	4ba9      	ldr	r3, [pc, #676]	; (80003f8 <main+0x2ac>)
 8000154:	2200      	movs	r2, #0
 8000156:	719a      	strb	r2, [r3, #6]

	hSoundLevelTest.testSoundLevel 		= 10;
 8000158:	230a      	movs	r3, #10
 800015a:	83bb      	strh	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800015c:	f001 f824 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000160:	f000 f9d8 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000164:	f000 fb14 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000168:	f000 faf4 	bl	8000754 <MX_DMA_Init>
  MX_ADC1_Init();
 800016c:	f000 fa2e 	bl	80005cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000170:	f000 fa98 	bl	80006a4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000174:	f000 fa68 	bl	8000648 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t 	ADC_Buffer[1] 		= {0};										//Initialize ADC DMA buffer
 8000178:	2300      	movs	r3, #0
 800017a:	803b      	strh	r3, [r7, #0]

  hIndicator.indicatorAddress 	= PCF8574_ADDRESS;
 800017c:	2340      	movs	r3, #64	; 0x40
 800017e:	81bb      	strh	r3, [r7, #12]
  hIndicator.indicatorEnable	= ENABLE;
 8000180:	2301      	movs	r3, #1
 8000182:	723b      	strb	r3, [r7, #8]
  hIndicator.indicatorCounter	= ENABLE;
 8000184:	2301      	movs	r3, #1
 8000186:	81fb      	strh	r3, [r7, #14]
  hIndicator.indicatorLedSet 	= SET;
 8000188:	2301      	movs	r3, #1
 800018a:	727b      	strb	r3, [r7, #9]

  hMenuButton.buttonStatus 		= MenuButtonStatus_notPressed;
 800018c:	4b9a      	ldr	r3, [pc, #616]	; (80003f8 <main+0x2ac>)
 800018e:	2203      	movs	r2, #3
 8000190:	715a      	strb	r2, [r3, #5]


  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 1);							//Start ADC sampling over DMA
 8000192:	463b      	mov	r3, r7
 8000194:	2201      	movs	r2, #1
 8000196:	4619      	mov	r1, r3
 8000198:	4898      	ldr	r0, [pc, #608]	; (80003fc <main+0x2b0>)
 800019a:	f001 f93f 	bl	800141c <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800019e:	2100      	movs	r1, #0
 80001a0:	4897      	ldr	r0, [pc, #604]	; (8000400 <main+0x2b4>)
 80001a2:	f003 fa23 	bl	80035ec <HAL_TIM_PWM_Start>

  HAL_I2C_Init(&hi2c1);
 80001a6:	4897      	ldr	r0, [pc, #604]	; (8000404 <main+0x2b8>)
 80001a8:	f002 f8d4 	bl	8002354 <HAL_I2C_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ADC_Buffer[0] < 3900)										//it is possible that one of the buttons has been pressed
 80001ac:	883b      	ldrh	r3, [r7, #0]
 80001ae:	f640 723b 	movw	r2, #3899	; 0xf3b
 80001b2:	4293      	cmp	r3, r2
 80001b4:	f200 80b4 	bhi.w	8000320 <main+0x1d4>
	  {																//Every led will have a debounce function

		  if((ADC_Buffer[0] <= 500) && (ADC_Buffer[0] > 1)) //First region
 80001b8:	883b      	ldrh	r3, [r7, #0]
 80001ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001be:	d813      	bhi.n	80001e8 <main+0x9c>
 80001c0:	883b      	ldrh	r3, [r7, #0]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d910      	bls.n	80001e8 <main+0x9c>
		  {
			  if(Button_DeBounce(ADC_Buffer))
 80001c6:	463b      	mov	r3, r7
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 fb41 	bl	8000850 <Button_DeBounce>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	f000 80c6 	beq.w	8000362 <main+0x216>
			  {
				  htim2.Instance->PSC 	= 125;
 80001d6:	4b8a      	ldr	r3, [pc, #552]	; (8000400 <main+0x2b4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	227d      	movs	r2, #125	; 0x7d
 80001dc:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = hSoundLevelTest.testSoundLevel;
 80001de:	8bba      	ldrh	r2, [r7, #28]
 80001e0:	4b87      	ldr	r3, [pc, #540]	; (8000400 <main+0x2b4>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button_DeBounce(ADC_Buffer))
 80001e6:	e0bc      	b.n	8000362 <main+0x216>
			  }
		  }
		  else if((ADC_Buffer[0] <= 1250) && (ADC_Buffer[0] > 750)) //Second region
 80001e8:	883b      	ldrh	r3, [r7, #0]
 80001ea:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d815      	bhi.n	800021e <main+0xd2>
 80001f2:	883b      	ldrh	r3, [r7, #0]
 80001f4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d910      	bls.n	800021e <main+0xd2>
		  {
			  if(Button1_DeBounce(ADC_Buffer))
 80001fc:	463b      	mov	r3, r7
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 fb5c 	bl	80008bc <Button1_DeBounce>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	f000 80ab 	beq.w	8000362 <main+0x216>
			  {
				  htim2.Instance->PSC 	= 150;
 800020c:	4b7c      	ldr	r3, [pc, #496]	; (8000400 <main+0x2b4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2296      	movs	r2, #150	; 0x96
 8000212:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = hSoundLevelTest.testSoundLevel;
 8000214:	8bba      	ldrh	r2, [r7, #28]
 8000216:	4b7a      	ldr	r3, [pc, #488]	; (8000400 <main+0x2b4>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button1_DeBounce(ADC_Buffer))
 800021c:	e0a1      	b.n	8000362 <main+0x216>
			  }
		  }
		  else if((ADC_Buffer[0] <= 1800) && (ADC_Buffer[0] > 1300)) //third region
 800021e:	883b      	ldrh	r3, [r7, #0]
 8000220:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000224:	d815      	bhi.n	8000252 <main+0x106>
 8000226:	883b      	ldrh	r3, [r7, #0]
 8000228:	f240 5214 	movw	r2, #1300	; 0x514
 800022c:	4293      	cmp	r3, r2
 800022e:	d910      	bls.n	8000252 <main+0x106>
		  {
			  if(Button2_DeBounce(ADC_Buffer))
 8000230:	463b      	mov	r3, r7
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fb78 	bl	8000928 <Button2_DeBounce>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	f000 8091 	beq.w	8000362 <main+0x216>
			  {
				  htim2.Instance->PSC 	= 175;
 8000240:	4b6f      	ldr	r3, [pc, #444]	; (8000400 <main+0x2b4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	22af      	movs	r2, #175	; 0xaf
 8000246:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = hSoundLevelTest.testSoundLevel;
 8000248:	8bba      	ldrh	r2, [r7, #28]
 800024a:	4b6d      	ldr	r3, [pc, #436]	; (8000400 <main+0x2b4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button2_DeBounce(ADC_Buffer))
 8000250:	e087      	b.n	8000362 <main+0x216>
			  }
		  }
		  else if((ADC_Buffer[0] <= 2300) && (ADC_Buffer[0] > 1800)) //Forth region
 8000252:	883b      	ldrh	r3, [r7, #0]
 8000254:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000258:	4293      	cmp	r3, r2
 800025a:	d813      	bhi.n	8000284 <main+0x138>
 800025c:	883b      	ldrh	r3, [r7, #0]
 800025e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000262:	d90f      	bls.n	8000284 <main+0x138>
		  {
			  if(Button3_DeBounce(ADC_Buffer))
 8000264:	463b      	mov	r3, r7
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fb94 	bl	8000994 <Button3_DeBounce>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d077      	beq.n	8000362 <main+0x216>
			  {
				  htim2.Instance->PSC 	= 200;
 8000272:	4b63      	ldr	r3, [pc, #396]	; (8000400 <main+0x2b4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	22c8      	movs	r2, #200	; 0xc8
 8000278:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = hSoundLevelTest.testSoundLevel;
 800027a:	8bba      	ldrh	r2, [r7, #28]
 800027c:	4b60      	ldr	r3, [pc, #384]	; (8000400 <main+0x2b4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button3_DeBounce(ADC_Buffer))
 8000282:	e06e      	b.n	8000362 <main+0x216>
			  }
		  }
		  else if((ADC_Buffer[0] <= 2900) && (ADC_Buffer[0] > 2400)) //Fifth region
 8000284:	883b      	ldrh	r3, [r7, #0]
 8000286:	f640 3254 	movw	r2, #2900	; 0xb54
 800028a:	4293      	cmp	r3, r2
 800028c:	d813      	bhi.n	80002b6 <main+0x16a>
 800028e:	883b      	ldrh	r3, [r7, #0]
 8000290:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000294:	d90f      	bls.n	80002b6 <main+0x16a>
		  {
			  if(Button4_DeBounce(ADC_Buffer))
 8000296:	463b      	mov	r3, r7
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fbb1 	bl	8000a00 <Button4_DeBounce>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d05e      	beq.n	8000362 <main+0x216>
			  {
				  htim2.Instance->PSC 	= 225;
 80002a4:	4b56      	ldr	r3, [pc, #344]	; (8000400 <main+0x2b4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	22e1      	movs	r2, #225	; 0xe1
 80002aa:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = hSoundLevelTest.testSoundLevel;
 80002ac:	8bba      	ldrh	r2, [r7, #28]
 80002ae:	4b54      	ldr	r3, [pc, #336]	; (8000400 <main+0x2b4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button4_DeBounce(ADC_Buffer))
 80002b4:	e055      	b.n	8000362 <main+0x216>
			  }
		  }
		  else if((ADC_Buffer[0] <= 3400) && (ADC_Buffer[0] > 3000)) //Sixth region
 80002b6:	883b      	ldrh	r3, [r7, #0]
 80002b8:	f640 5248 	movw	r2, #3400	; 0xd48
 80002bc:	4293      	cmp	r3, r2
 80002be:	d814      	bhi.n	80002ea <main+0x19e>
 80002c0:	883b      	ldrh	r3, [r7, #0]
 80002c2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d90f      	bls.n	80002ea <main+0x19e>
		  {
			  if(Button5_DeBounce(ADC_Buffer))
 80002ca:	463b      	mov	r3, r7
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fbcd 	bl	8000a6c <Button5_DeBounce>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d044      	beq.n	8000362 <main+0x216>
			  {
				  htim2.Instance->PSC 	= 250;
 80002d8:	4b49      	ldr	r3, [pc, #292]	; (8000400 <main+0x2b4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	22fa      	movs	r2, #250	; 0xfa
 80002de:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = hSoundLevelTest.testSoundLevel;
 80002e0:	8bba      	ldrh	r2, [r7, #28]
 80002e2:	4b47      	ldr	r3, [pc, #284]	; (8000400 <main+0x2b4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button5_DeBounce(ADC_Buffer))
 80002e8:	e03b      	b.n	8000362 <main+0x216>
			  }
		  }
		  else if((ADC_Buffer[0] <= 3900) && (ADC_Buffer[0] > 3500)) //Seventh region
 80002ea:	883b      	ldrh	r3, [r7, #0]
 80002ec:	f640 723c 	movw	r2, #3900	; 0xf3c
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d836      	bhi.n	8000362 <main+0x216>
 80002f4:	883b      	ldrh	r3, [r7, #0]
 80002f6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d931      	bls.n	8000362 <main+0x216>
		  {
			  if(Button6_DeBounce(ADC_Buffer))
 80002fe:	463b      	mov	r3, r7
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fbe9 	bl	8000ad8 <Button6_DeBounce>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d02a      	beq.n	8000362 <main+0x216>
			  {
				  htim2.Instance->PSC 	= 275;
 800030c:	4b3c      	ldr	r3, [pc, #240]	; (8000400 <main+0x2b4>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f240 1213 	movw	r2, #275	; 0x113
 8000314:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = hSoundLevelTest.testSoundLevel;
 8000316:	8bba      	ldrh	r2, [r7, #28]
 8000318:	4b39      	ldr	r3, [pc, #228]	; (8000400 <main+0x2b4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	635a      	str	r2, [r3, #52]	; 0x34
 800031e:	e020      	b.n	8000362 <main+0x216>
			  }
		  }
	  }
	  else
	  {
		  sirenHandler(&hSoundLevelTest);
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fd31 	bl	8000d8c <sirenHandler>


		  Button_DeBounce(ADC_Buffer);										//Discharge software capacitors
 800032a:	463b      	mov	r3, r7
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fa8f 	bl	8000850 <Button_DeBounce>
		  Button1_DeBounce(ADC_Buffer);
 8000332:	463b      	mov	r3, r7
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fac1 	bl	80008bc <Button1_DeBounce>
		  Button2_DeBounce(ADC_Buffer);
 800033a:	463b      	mov	r3, r7
 800033c:	4618      	mov	r0, r3
 800033e:	f000 faf3 	bl	8000928 <Button2_DeBounce>
		  Button3_DeBounce(ADC_Buffer);
 8000342:	463b      	mov	r3, r7
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fb25 	bl	8000994 <Button3_DeBounce>
		  Button4_DeBounce(ADC_Buffer);
 800034a:	463b      	mov	r3, r7
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fb57 	bl	8000a00 <Button4_DeBounce>
		  Button5_DeBounce(ADC_Buffer);
 8000352:	463b      	mov	r3, r7
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fb89 	bl	8000a6c <Button5_DeBounce>
		  Button6_DeBounce(ADC_Buffer);
 800035a:	463b      	mov	r3, r7
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fbbb 	bl	8000ad8 <Button6_DeBounce>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(hMenuButton.buttonFlag.bit.B0)
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <main+0x2ac>)
 8000364:	799b      	ldrb	r3, [r3, #6]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d01d      	beq.n	80003ac <main+0x260>
	  {
		  if(MenuButton_Debounce())											//Apply de-bounce algorithm before taking any action
 8000370:	f000 fbe8 	bl	8000b44 <MenuButton_Debounce>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d018      	beq.n	80003ac <main+0x260>
		  {
			  hMenuButton.buttonFlag.bit.B0 = RESET;						//Reset interrupt flag
 800037a:	4a1f      	ldr	r2, [pc, #124]	; (80003f8 <main+0x2ac>)
 800037c:	7993      	ldrb	r3, [r2, #6]
 800037e:	f36f 0300 	bfc	r3, #0, #1
 8000382:	7193      	strb	r3, [r2, #6]

			  if(hMenuButton.buttonTimerEnable != SET)						//Start timer when the menu button gets pressed for the first time
 8000384:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <main+0x2ac>)
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	f083 0301 	eor.w	r3, r3, #1
 800038c:	b2db      	uxtb	r3, r3
 800038e:	2b00      	cmp	r3, #0
 8000390:	d009      	beq.n	80003a6 <main+0x25a>
			  {
				  hMenuButton.buttonTimerEnable = SET;						//Enable software timer
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <main+0x2ac>)
 8000394:	2201      	movs	r2, #1
 8000396:	711a      	strb	r2, [r3, #4]
				  hMenuButton.buttonStatus = MenuButtonStatus_oneClick;		//The menu button has been pressed for one time
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <main+0x2ac>)
 800039a:	2200      	movs	r2, #0
 800039c:	715a      	strb	r2, [r3, #5]
				  setTimer(&hMenuButton.buttonTimer);						//Start software timer
 800039e:	4816      	ldr	r0, [pc, #88]	; (80003f8 <main+0x2ac>)
 80003a0:	f000 fc06 	bl	8000bb0 <setTimer>
 80003a4:	e002      	b.n	80003ac <main+0x260>
			  }
			  else
			  {
				  hMenuButton.buttonStatus = MenuButtonStatus_doubleClick;	//If the timer is already started this means that the button is pressed for the second time
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <main+0x2ac>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	715a      	strb	r2, [r3, #5]
			  }
		  }
	  }
	  if((checkTimer(&hMenuButton.buttonTimer, 5 * hMenuButton.buttonHeldPressedCounter)) && ( hMenuButton.buttonStatus == MenuButtonStatus_oneClick))
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <main+0x2ac>)
 80003ae:	79db      	ldrb	r3, [r3, #7]
 80003b0:	461a      	mov	r2, r3
 80003b2:	4613      	mov	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	4619      	mov	r1, r3
 80003ba:	480f      	ldr	r0, [pc, #60]	; (80003f8 <main+0x2ac>)
 80003bc:	f000 fc05 	bl	8000bca <checkTimer>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d025      	beq.n	8000412 <main+0x2c6>
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <main+0x2ac>)
 80003c8:	795b      	ldrb	r3, [r3, #5]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d121      	bne.n	8000412 <main+0x2c6>
	  {																		//If the menu button has been pressed, take logic sample every 10 ms from the button read pin
		  if(!HAL_GPIO_ReadPin(menu_button_GPIO_Port, menu_button_Pin))		//To check if the button is still pressed
 80003ce:	2110      	movs	r1, #16
 80003d0:	480d      	ldr	r0, [pc, #52]	; (8000408 <main+0x2bc>)
 80003d2:	f001 ff6d 	bl	80022b0 <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d105      	bne.n	80003e8 <main+0x29c>
		  {
			  ++hMenuButton.buttonHeldPressedCounter;						//Increment samples number
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <main+0x2ac>)
 80003de:	79db      	ldrb	r3, [r3, #7]
 80003e0:	3301      	adds	r3, #1
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <main+0x2ac>)
 80003e6:	71da      	strb	r2, [r3, #7]
		  }
		  hMenuButton.buttonStatus = (hMenuButton.buttonHeldPressedCounter >= 65)  ? MenuButtonStatus_heldPressed : hMenuButton.buttonStatus;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <main+0x2ac>)
 80003ea:	79db      	ldrb	r3, [r3, #7]
 80003ec:	2b40      	cmp	r3, #64	; 0x40
 80003ee:	d80d      	bhi.n	800040c <main+0x2c0>
 80003f0:	4b01      	ldr	r3, [pc, #4]	; (80003f8 <main+0x2ac>)
 80003f2:	795b      	ldrb	r3, [r3, #5]
 80003f4:	e00b      	b.n	800040e <main+0x2c2>
 80003f6:	bf00      	nop
 80003f8:	2000008c 	.word	0x2000008c
 80003fc:	20000094 	.word	0x20000094
 8000400:	20000108 	.word	0x20000108
 8000404:	20000038 	.word	0x20000038
 8000408:	40010800 	.word	0x40010800
 800040c:	2302      	movs	r3, #2
 800040e:	4a40      	ldr	r2, [pc, #256]	; (8000510 <main+0x3c4>)
 8000410:	7153      	strb	r3, [r2, #5]
	  }																		//If the button is held pressed change button status
	  if((checkTimer(&hMenuButton.buttonTimer, 350)) && hMenuButton.buttonTimerEnable)
 8000412:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000416:	483e      	ldr	r0, [pc, #248]	; (8000510 <main+0x3c4>)
 8000418:	f000 fbd7 	bl	8000bca <checkTimer>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d070      	beq.n	8000504 <main+0x3b8>
 8000422:	4b3b      	ldr	r3, [pc, #236]	; (8000510 <main+0x3c4>)
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d06c      	beq.n	8000504 <main+0x3b8>
	  {																		//Take decision after 300 ms whether one click, double click or held pressed event has occured
		  switch(hMenuButton.buttonStatus)
 800042a:	4b39      	ldr	r3, [pc, #228]	; (8000510 <main+0x3c4>)
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	2b03      	cmp	r3, #3
 8000430:	d85f      	bhi.n	80004f2 <main+0x3a6>
 8000432:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <main+0x2ec>)
 8000434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000438:	08000449 	.word	0x08000449
 800043c:	08000489 	.word	0x08000489
 8000440:	080004c9 	.word	0x080004c9
 8000444:	080004f3 	.word	0x080004f3
		  {
		  	  case	MenuButtonStatus_oneClick:
		  		  if(soundLevelUpperBoundryCheck(hSoundLevelTest.testSoundLevel))
 8000448:	8bbb      	ldrh	r3, [r7, #28]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fbe8 	bl	8000c20 <soundLevelUpperBoundryCheck>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d003      	beq.n	800045e <main+0x312>
		  		  {
		  			hSoundLevelTest.testSoundLevel += AUDIO_LEVEL_STEP; 						//Increment sound level on step
 8000456:	8bbb      	ldrh	r3, [r7, #28]
 8000458:	330a      	adds	r3, #10
 800045a:	b29b      	uxth	r3, r3
 800045c:	83bb      	strh	r3, [r7, #28]
		  		  }
		  		  if(indicatorBufferUpperCheck(hIndicator.indicatorCounter))
 800045e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fc17 	bl	8000c98 <indicatorBufferUpperCheck>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d03d      	beq.n	80004ec <main+0x3a0>
		  		  {
		  			  hIndicator.indicatorEnable = ENABLE;					//Enable LED indicator handler
 8000470:	2301      	movs	r3, #1
 8000472:	723b      	strb	r3, [r7, #8]
		  			++hIndicator.indicatorCounter;							//Increment number of LEDs to be turned on
 8000474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000478:	b29b      	uxth	r3, r3
 800047a:	3301      	adds	r3, #1
 800047c:	b29b      	uxth	r3, r3
 800047e:	b21b      	sxth	r3, r3
 8000480:	81fb      	strh	r3, [r7, #14]
		  			  hIndicator.indicatorLedSet = SET;						//Turn on one more LED
 8000482:	2301      	movs	r3, #1
 8000484:	727b      	strb	r3, [r7, #9]
		  		  }
		  		  break;
 8000486:	e031      	b.n	80004ec <main+0x3a0>
		  	  case 	MenuButtonStatus_doubleClick:
		  		  if(soundLevelLowerBoundryCheck(hSoundLevelTest.testSoundLevel))
 8000488:	8bbb      	ldrh	r3, [r7, #28]
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fbb6 	bl	8000bfc <soundLevelLowerBoundryCheck>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d003      	beq.n	800049e <main+0x352>
		  		  {
		  			  hSoundLevelTest.testSoundLevel -= AUDIO_LEVEL_STEP;						//Detriment sound level
 8000496:	8bbb      	ldrh	r3, [r7, #28]
 8000498:	3b0a      	subs	r3, #10
 800049a:	b29b      	uxth	r3, r3
 800049c:	83bb      	strh	r3, [r7, #28]
		  		  }
		  		  if(indicatorBufferLowerCheck(hIndicator.indicatorCounter))
 800049e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fc0a 	bl	8000cbe <indicatorBufferLowerCheck>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d01f      	beq.n	80004f0 <main+0x3a4>
		  		  {
		  			  hIndicator.indicatorEnable = ENABLE;
 80004b0:	2301      	movs	r3, #1
 80004b2:	723b      	strb	r3, [r7, #8]
		  			--hIndicator.indicatorCounter;							//Increment number of LEDs to be turned on
 80004b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	3b01      	subs	r3, #1
 80004bc:	b29b      	uxth	r3, r3
 80004be:	b21b      	sxth	r3, r3
 80004c0:	81fb      	strh	r3, [r7, #14]
		  			  hIndicator.indicatorLedSet = RESET;					//Turn off one more LED
 80004c2:	2300      	movs	r3, #0
 80004c4:	727b      	strb	r3, [r7, #9]
		  		  }
		  		 break;
 80004c6:	e013      	b.n	80004f0 <main+0x3a4>
		  	  case MenuButtonStatus_heldPressed:
		  		  hSoundLevelTest.testTimerEnable ^= 1;
 80004c8:	7e3b      	ldrb	r3, [r7, #24]
 80004ca:	f083 0301 	eor.w	r3, r3, #1
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf14      	ite	ne
 80004d4:	2301      	movne	r3, #1
 80004d6:	2300      	moveq	r3, #0
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	763b      	strb	r3, [r7, #24]
		  		  setTimer(&hSoundLevelTest.testTimer);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 fb65 	bl	8000bb0 <setTimer>
		  		  hSoundLevelTest.testDirection = ENABLE;
 80004e6:	2301      	movs	r3, #1
 80004e8:	76bb      	strb	r3, [r7, #26]
		  		 break;
 80004ea:	e002      	b.n	80004f2 <main+0x3a6>
		  		  break;
 80004ec:	bf00      	nop
 80004ee:	e000      	b.n	80004f2 <main+0x3a6>
		  		 break;
 80004f0:	bf00      	nop
		  	case MenuButtonStatus_notPressed:
		  		 break;

		  }
		  hMenuButton.buttonTimerEnable 		= RESET;					//Disable software timer
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <main+0x3c4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	711a      	strb	r2, [r3, #4]
		  hMenuButton.buttonHeldPressedCounter 	= RESET;					//Reset counter
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <main+0x3c4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	71da      	strb	r2, [r3, #7]
		  hMenuButton.buttonStatus 				= MenuButtonStatus_notPressed;
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <main+0x3c4>)
 8000500:	2203      	movs	r2, #3
 8000502:	715a      	strb	r2, [r3, #5]
		  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	//button status is set to no press to avoid misbehavior of the button functionality

	  }
	  indicatorHandler(&hIndicator);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fb9c 	bl	8000c44 <indicatorHandler>
	  if(ADC_Buffer[0] < 3900)										//it is possible that one of the buttons has been pressed
 800050c:	e64e      	b.n	80001ac <main+0x60>
 800050e:	bf00      	nop
 8000510:	2000008c 	.word	0x2000008c

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fc52 	bl	8003dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000560:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000564:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fb30 	bl	8002bd0 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000576:	f000 fc69 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fd9a 	bl	80030d0 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005a2:	f000 fc53 	bl	8000e4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005a6:	2302      	movs	r3, #2
 80005a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 ff14 	bl	80033e0 <HAL_RCCEx_PeriphCLKConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005be:	f000 fc45 	bl	8000e4c <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	; 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0x74>)
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_ADC1_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC1_Init+0x74>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x74>)
 80005f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_ADC1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0x74>)
 800060a:	f000 fe2f 	bl	800126c <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 fc1a 	bl	8000e4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000618:	2308      	movs	r3, #8
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	2301      	movs	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000620:	2307      	movs	r3, #7
 8000622:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x74>)
 800062a:	f000 fff1 	bl	8001610 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000634:	f000 fc0a 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000094 	.word	0x20000094
 8000644:	40012400 	.word	0x40012400

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C1_Init+0x50>)
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_I2C1_Init+0x54>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_I2C1_Init+0x50>)
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x58>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_I2C1_Init+0x50>)
 8000666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_I2C1_Init+0x50>)
 8000686:	f001 fe65 	bl	8002354 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 fbdc 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000038 	.word	0x20000038
 800069c:	40005400 	.word	0x40005400
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_TIM2_Init+0xac>)
 80006c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200;
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_TIM2_Init+0xac>)
 80006d0:	22c8      	movs	r2, #200	; 0xc8
 80006d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_TIM2_Init+0xac>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_TIM2_Init+0xac>)
 80006dc:	2264      	movs	r2, #100	; 0x64
 80006de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_TIM2_Init+0xac>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_TIM2_Init+0xac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <MX_TIM2_Init+0xac>)
 80006ee:	f002 ff2d 	bl	800354c <HAL_TIM_PWM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80006f8:	f000 fba8 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4619      	mov	r1, r3
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_TIM2_Init+0xac>)
 800070c:	f003 fadc 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000716:	f000 fb99 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071a:	2360      	movs	r3, #96	; 0x60
 800071c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	4619      	mov	r1, r3
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <MX_TIM2_Init+0xac>)
 8000732:	f002 fffd 	bl	8003730 <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800073c:	f000 fb86 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <MX_TIM2_Init+0xac>)
 8000742:	f000 fc7d 	bl	8001040 <HAL_TIM_MspPostInit>

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	; 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000108 	.word	0x20000108

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_DMA_Init+0x38>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <MX_DMA_Init+0x38>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_DMA_Init+0x38>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200b      	movs	r0, #11
 8000778:	f001 fa1b 	bl	8001bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800077c:	200b      	movs	r0, #11
 800077e:	f001 fa34 	bl	8001bea <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a26      	ldr	r2, [pc, #152]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a20      	ldr	r2, [pc, #128]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_pin_GPIO_Port, test_pin_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2102      	movs	r1, #2
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_GPIO_Init+0xb8>)
 80007f2:	f001 fd74 	bl	80022de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : test_pin_Pin */
  GPIO_InitStruct.Pin = test_pin_Pin;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2302      	movs	r3, #2
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_pin_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4619      	mov	r1, r3
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_GPIO_Init+0xb8>)
 800080e:	f001 fbf5 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : menu_button_Pin */
  GPIO_InitStruct.Pin = menu_button_Pin;
 8000812:	2310      	movs	r3, #16
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_GPIO_Init+0xbc>)
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(menu_button_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <MX_GPIO_Init+0xb8>)
 8000826:	f001 fbe9 	bl	8001ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200a      	movs	r0, #10
 8000830:	f001 f9bf 	bl	8001bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000834:	200a      	movs	r0, #10
 8000836:	f001 f9d8 	bl	8001bea <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800
 800084c:	10210000 	.word	0x10210000

08000850 <Button_DeBounce>:

/* USER CODE BEGIN 4 */

uint8_t Button_DeBounce(uint16_t* ADC_Buffer)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;			//Software capacitor charged level
	if(ADC_Buffer[0] < 3900)						//The level is set to be static so the last level value is not gone after executing this function
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000864:	4293      	cmp	r3, r2
 8000866:	d806      	bhi.n	8000876 <Button_DeBounce+0x26>
	{
		++Level;									//Increment Software capacitor charged level
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <Button_DeBounce+0x68>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <Button_DeBounce+0x68>)
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	e00e      	b.n	8000894 <Button_DeBounce+0x44>
	}
	else
	{												//entered when no button is pressed
		--Level;									//Decrement Software capacitor charged level
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <Button_DeBounce+0x68>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <Button_DeBounce+0x68>)
 8000880:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)					//keep the lowest level at Restart_Level. this will also prevent overflow
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <Button_DeBounce+0x68>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800088a:	d803      	bhi.n	8000894 <Button_DeBounce+0x44>
		{
			Level = Restart_Level;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <Button_DeBounce+0x68>)
 800088e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000892:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)					//limit the Software capacitor charged level at Acceptance_Level when a button is held pressed
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <Button_DeBounce+0x68>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800089c:	4293      	cmp	r3, r2
 800089e:	d905      	bls.n	80008ac <Button_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <Button_DeBounce+0x68>)
 80008a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008a6:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;								//Enable taking action wherever this function is called
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
	}
	return ret;										//Button_DeBounce functions are copies of this function for every single button added to the keyboard bus
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	20000000 	.word	0x20000000

080008bc <Button1_DeBounce>:

uint8_t Button1_DeBounce(uint16_t* ADC_Buffer)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	f640 723b 	movw	r2, #3899	; 0xf3b
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d806      	bhi.n	80008e2 <Button1_DeBounce+0x26>
	{
		++Level;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <Button1_DeBounce+0x68>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <Button1_DeBounce+0x68>)
 80008de:	801a      	strh	r2, [r3, #0]
 80008e0:	e00e      	b.n	8000900 <Button1_DeBounce+0x44>
	}
	else
	{
		--Level;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <Button1_DeBounce+0x68>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <Button1_DeBounce+0x68>)
 80008ec:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <Button1_DeBounce+0x68>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008f6:	d803      	bhi.n	8000900 <Button1_DeBounce+0x44>
		{
			Level = Restart_Level;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <Button1_DeBounce+0x68>)
 80008fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008fe:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <Button1_DeBounce+0x68>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000908:	4293      	cmp	r3, r2
 800090a:	d905      	bls.n	8000918 <Button1_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <Button1_DeBounce+0x68>)
 800090e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000912:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000002 	.word	0x20000002

08000928 <Button2_DeBounce>:

uint8_t Button2_DeBounce(uint16_t* ADC_Buffer)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	f640 723b 	movw	r2, #3899	; 0xf3b
 800093c:	4293      	cmp	r3, r2
 800093e:	d806      	bhi.n	800094e <Button2_DeBounce+0x26>
	{
		++Level;
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <Button2_DeBounce+0x68>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <Button2_DeBounce+0x68>)
 800094a:	801a      	strh	r2, [r3, #0]
 800094c:	e00e      	b.n	800096c <Button2_DeBounce+0x44>
	}
	else
	{
		--Level;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <Button2_DeBounce+0x68>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	3b01      	subs	r3, #1
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <Button2_DeBounce+0x68>)
 8000958:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <Button2_DeBounce+0x68>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000962:	d803      	bhi.n	800096c <Button2_DeBounce+0x44>
		{
			Level = Restart_Level;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <Button2_DeBounce+0x68>)
 8000966:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800096a:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <Button2_DeBounce+0x68>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000974:	4293      	cmp	r3, r2
 8000976:	d905      	bls.n	8000984 <Button2_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <Button2_DeBounce+0x68>)
 800097a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800097e:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000980:	2301      	movs	r3, #1
 8000982:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000004 	.word	0x20000004

08000994 <Button3_DeBounce>:
uint8_t Button3_DeBounce(uint16_t* ADC_Buffer)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	f640 723b 	movw	r2, #3899	; 0xf3b
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d806      	bhi.n	80009ba <Button3_DeBounce+0x26>
	{
		++Level;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <Button3_DeBounce+0x68>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <Button3_DeBounce+0x68>)
 80009b6:	801a      	strh	r2, [r3, #0]
 80009b8:	e00e      	b.n	80009d8 <Button3_DeBounce+0x44>
	}
	else
	{
		--Level;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <Button3_DeBounce+0x68>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	3b01      	subs	r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <Button3_DeBounce+0x68>)
 80009c4:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <Button3_DeBounce+0x68>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009ce:	d803      	bhi.n	80009d8 <Button3_DeBounce+0x44>
		{
			Level = Restart_Level;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <Button3_DeBounce+0x68>)
 80009d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009d6:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <Button3_DeBounce+0x68>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d905      	bls.n	80009f0 <Button3_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <Button3_DeBounce+0x68>)
 80009e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009ea:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	20000006 	.word	0x20000006

08000a00 <Button4_DeBounce>:
uint8_t Button4_DeBounce(uint16_t* ADC_Buffer)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d806      	bhi.n	8000a26 <Button4_DeBounce+0x26>
	{
		++Level;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <Button4_DeBounce+0x68>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <Button4_DeBounce+0x68>)
 8000a22:	801a      	strh	r2, [r3, #0]
 8000a24:	e00e      	b.n	8000a44 <Button4_DeBounce+0x44>
	}
	else
	{
		--Level;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <Button4_DeBounce+0x68>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <Button4_DeBounce+0x68>)
 8000a30:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <Button4_DeBounce+0x68>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a3a:	d803      	bhi.n	8000a44 <Button4_DeBounce+0x44>
		{
			Level = Restart_Level;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <Button4_DeBounce+0x68>)
 8000a3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a42:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <Button4_DeBounce+0x68>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d905      	bls.n	8000a5c <Button4_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <Button4_DeBounce+0x68>)
 8000a52:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a56:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000008 	.word	0x20000008

08000a6c <Button5_DeBounce>:
uint8_t Button5_DeBounce(uint16_t* ADC_Buffer)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d806      	bhi.n	8000a92 <Button5_DeBounce+0x26>
	{
		++Level;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <Button5_DeBounce+0x68>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <Button5_DeBounce+0x68>)
 8000a8e:	801a      	strh	r2, [r3, #0]
 8000a90:	e00e      	b.n	8000ab0 <Button5_DeBounce+0x44>
	}
	else
	{
		--Level;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <Button5_DeBounce+0x68>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <Button5_DeBounce+0x68>)
 8000a9c:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <Button5_DeBounce+0x68>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000aa6:	d803      	bhi.n	8000ab0 <Button5_DeBounce+0x44>
		{
			Level = Restart_Level;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <Button5_DeBounce+0x68>)
 8000aaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000aae:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <Button5_DeBounce+0x68>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d905      	bls.n	8000ac8 <Button5_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <Button5_DeBounce+0x68>)
 8000abe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ac2:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	2000000a 	.word	0x2000000a

08000ad8 <Button6_DeBounce>:
uint8_t Button6_DeBounce(uint16_t* ADC_Buffer)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d806      	bhi.n	8000afe <Button6_DeBounce+0x26>
	{
		++Level;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <Button6_DeBounce+0x68>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <Button6_DeBounce+0x68>)
 8000afa:	801a      	strh	r2, [r3, #0]
 8000afc:	e00e      	b.n	8000b1c <Button6_DeBounce+0x44>
	}
	else
	{
		--Level;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <Button6_DeBounce+0x68>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <Button6_DeBounce+0x68>)
 8000b08:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <Button6_DeBounce+0x68>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b12:	d803      	bhi.n	8000b1c <Button6_DeBounce+0x44>
		{
			Level = Restart_Level;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <Button6_DeBounce+0x68>)
 8000b16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b1a:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <Button6_DeBounce+0x68>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d905      	bls.n	8000b34 <Button6_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <Button6_DeBounce+0x68>)
 8000b2a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b2e:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	2000000c 	.word	0x2000000c

08000b44 <MenuButton_Debounce>:
uint8_t MenuButton_Debounce(void)									//Menu Button debounce function
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	uint8_t 		ret = DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	static uint16_t Level = Restart_Level;
	if(!HAL_GPIO_ReadPin(menu_button_GPIO_Port, menu_button_Pin))
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <MenuButton_Debounce+0x64>)
 8000b52:	f001 fbad 	bl	80022b0 <HAL_GPIO_ReadPin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d106      	bne.n	8000b6a <MenuButton_Debounce+0x26>
	{
		++Level;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MenuButton_Debounce+0x68>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MenuButton_Debounce+0x68>)
 8000b66:	801a      	strh	r2, [r3, #0]
 8000b68:	e00e      	b.n	8000b88 <MenuButton_Debounce+0x44>
	}
	else
	{
		--Level;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MenuButton_Debounce+0x68>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MenuButton_Debounce+0x68>)
 8000b74:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MenuButton_Debounce+0x68>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b7e:	d803      	bhi.n	8000b88 <MenuButton_Debounce+0x44>
		{
			Level = Restart_Level;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MenuButton_Debounce+0x68>)
 8000b82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b86:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= 4000)
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MenuButton_Debounce+0x68>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b90:	d305      	bcc.n	8000b9e <MenuButton_Debounce+0x5a>
	{
		Level = Acceptance_Level;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MenuButton_Debounce+0x68>)
 8000b94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b98:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
	}
	return ret;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	2000000e 	.word	0x2000000e

08000bb0 <setTimer>:

void setTimer(uint32_t* timer)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	*timer = HAL_GetTick();
 8000bb8:	f000 fb4e 	bl	8001258 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <checkTimer>:
uint8_t checkTimer(uint32_t* timer, uint32_t msTime)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
	uint8_t ret = RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
	ret = ((HAL_GetTick() - *timer) > msTime)  ? ENABLE : DISABLE;
 8000bd8:	f000 fb3e 	bl	8001258 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	bf34      	ite	cc
 8000bea:	2301      	movcc	r3, #1
 8000bec:	2300      	movcs	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <soundLevelLowerBoundryCheck>:
FunctionalState soundLevelLowerBoundryCheck(uint16_t currentSoundLevel)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = ENABLE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
	if( (currentSoundLevel == 0))
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <soundLevelLowerBoundryCheck+0x18>
	{
		ret = DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <soundLevelUpperBoundryCheck>:
FunctionalState soundLevelUpperBoundryCheck(uint16_t currentSoundLevel)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = ENABLE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
	if(currentSoundLevel >= 90)
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	2b59      	cmp	r3, #89	; 0x59
 8000c32:	d901      	bls.n	8000c38 <soundLevelUpperBoundryCheck+0x18>
	{
		ret = DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <indicatorHandler>:
void indicatorHandler(Pcf7584Control_t* hLedIndicator)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
	uint8_t  IndicatorDisplay = hLedIndicator->indicatorBuffer;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	799b      	ldrb	r3, [r3, #6]
 8000c54:	73bb      	strb	r3, [r7, #14]
	if(hLedIndicator->indicatorEnable)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	791b      	ldrb	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d016      	beq.n	8000c8c <indicatorHandler+0x48>
	{
		hLedIndicator->indicatorEnable = DISABLE;				//Disable the activation flag to prevent entering this function
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	711a      	strb	r2, [r3, #4]
																//when no change is happening.
		indicatorBufferLoad(hLedIndicator);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f83d 	bl	8000ce4 <indicatorBufferLoad>

		IndicatorDisplay = hLedIndicator->indicatorBuffer;		//Copy to a temporary buffer
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	799b      	ldrb	r3, [r3, #6]
 8000c6e:	73bb      	strb	r3, [r7, #14]

		IndicatorDisplay ^= 0xFF;								//Invert bits before transmission
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	73bb      	strb	r3, [r7, #14]

		HAL_I2C_Master_Transmit(&hi2c1,							//Start transmission
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	8919      	ldrh	r1, [r3, #8]
 8000c7c:	f107 020e 	add.w	r2, r7, #14
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2301      	movs	r3, #1
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <indicatorHandler+0x50>)
 8000c88:	f001 fc9c 	bl	80025c4 <HAL_I2C_Master_Transmit>
				&IndicatorDisplay,
				ENABLE,
				100);

	}
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000038 	.word	0x20000038

08000c98 <indicatorBufferUpperCheck>:

bool indicatorBufferUpperCheck(uint8_t indicatorCounter)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	bool ret 	= DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]
	ret 		= (indicatorCounter == 8) ? DISABLE : ENABLE;	//Check if the upper indicator boundary has been reached
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
	return 	ret;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <indicatorBufferLowerCheck>:

bool indicatorBufferLowerCheck(uint8_t indicatorCounter)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
	bool ret 	= DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
	ret 		= (indicatorCounter == 0) ? DISABLE : ENABLE;	//Check if the lower indicator boundary has been reached
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	return 	ret;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <indicatorBufferLoad>:

void indicatorBufferLoad(Pcf7584Control_t* hLedIndicator)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
	if((hLedIndicator->indicatorLedSet == RESET) && (hLedIndicator->indicatorCounter - 1 < 0))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	795b      	ldrb	r3, [r3, #5]
 8000cf4:	f083 0301 	eor.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d009      	beq.n	8000d12 <indicatorBufferLoad+0x2e>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da03      	bge.n	8000d12 <indicatorBufferLoad+0x2e>
	{
		hLedIndicator->indicatorBuffer = RESET;				//Reset the indicator buffer if the buffer counter is 0 and the incoming command
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	719a      	strb	r2, [r3, #6]
			bit |= 1 << (hLedIndicator->indicatorCounter);	//Select the bit to be cleared
			CLEAR_BIT(hLedIndicator->indicatorBuffer, bit); //clear one bit in the indicator buffer
		}
	}

}
 8000d10:	e037      	b.n	8000d82 <indicatorBufferLoad+0x9e>
		if(hLedIndicator->indicatorLedSet == SET)			//One more LED will be turned on
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	795b      	ldrb	r3, [r3, #5]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d014      	beq.n	8000d44 <indicatorBufferLoad+0x60>
			bit |= 1 << (hLedIndicator->indicatorCounter - 1);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	2201      	movs	r2, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	73fb      	strb	r3, [r7, #15]
			SET_BIT(hLedIndicator->indicatorBuffer, bit);	//Set one bit in the indicator buffer
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	799a      	ldrb	r2, [r3, #6]
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	719a      	strb	r2, [r3, #6]
}
 8000d42:	e01e      	b.n	8000d82 <indicatorBufferLoad+0x9e>
		else if(hLedIndicator->indicatorLedSet == RESET) 	//One more LED will be turned off
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	795b      	ldrb	r3, [r3, #5]
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d017      	beq.n	8000d82 <indicatorBufferLoad+0x9e>
			bit |= 1 << (hLedIndicator->indicatorCounter);	//Select the bit to be cleared
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	4093      	lsls	r3, r2
 8000d5e:	b25a      	sxtb	r2, r3
 8000d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	73fb      	strb	r3, [r7, #15]
			CLEAR_BIT(hLedIndicator->indicatorBuffer, bit); //clear one bit in the indicator buffer
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	799b      	ldrb	r3, [r3, #6]
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	719a      	strb	r2, [r3, #6]
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <sirenHandler>:
void sirenHandler(SoundTest_t* hSiren)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	  if(!hSiren->testTimerEnable)							//In case of sound test don't turn off the buzzer
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	f083 0301 	eor.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <sirenHandler+0x20>
	  {
		  htim2.Instance->CCR1  = RESET;					//Set duty cycle to be zero
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <sirenHandler+0xbc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2200      	movs	r2, #0
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
			  }

		  }

	  }
}
 8000daa:	e048      	b.n	8000e3e <sirenHandler+0xb2>
		  htim2.Instance->PSC 	= 100 + hSiren->testCounter;	//Sound test related part the pre-scaler is modified continuously
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	795b      	ldrb	r3, [r3, #5]
 8000db0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <sirenHandler+0xbc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
		  htim2.Instance->CCR1  = hSiren->testSoundLevel;		//to output different tones
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	891a      	ldrh	r2, [r3, #8]
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <sirenHandler+0xbc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
		  if(checkTimer(&hSiren->testTimer, 15))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fefe 	bl	8000bca <checkTimer>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d034      	beq.n	8000e3e <sirenHandler+0xb2>
			  setTimer(&hSiren->testTimer);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff feea 	bl	8000bb0 <setTimer>
			  if(hSiren->testDirection)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	799b      	ldrb	r3, [r3, #6]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d016      	beq.n	8000e12 <sirenHandler+0x86>
				  hSiren->testCounter += 1;					//Lower frequency of PWM signal used while the sound test mode is ON
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	795b      	ldrb	r3, [r3, #5]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	715a      	strb	r2, [r3, #5]
				  if(hSiren->testCounter >= 250)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	795b      	ldrb	r3, [r3, #5]
 8000df4:	2bf9      	cmp	r3, #249	; 0xf9
 8000df6:	d922      	bls.n	8000e3e <sirenHandler+0xb2>
					  hSiren->testDirection ^= 1;			//Used to toggle between increasing and decreasing frequency tone
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	799b      	ldrb	r3, [r3, #6]
 8000dfc:	f083 0301 	eor.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	2300      	moveq	r3, #0
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	719a      	strb	r2, [r3, #6]
}
 8000e10:	e015      	b.n	8000e3e <sirenHandler+0xb2>
				  hSiren->testCounter -= 1;					//Increase frequency signal used while the sound test mode is ON
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	795b      	ldrb	r3, [r3, #5]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	715a      	strb	r2, [r3, #5]
				  if(hSiren->testCounter <= 150)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	795b      	ldrb	r3, [r3, #5]
 8000e22:	2b96      	cmp	r3, #150	; 0x96
 8000e24:	d80b      	bhi.n	8000e3e <sirenHandler+0xb2>
					  hSiren->testDirection ^= 1;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	799b      	ldrb	r3, [r3, #6]
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	719a      	strb	r2, [r3, #6]
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000108 	.word	0x20000108

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_MspInit+0x60>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_MspInit+0x60>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000

08000ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <HAL_ADC_MspInit+0xbc>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d149      	bne.n	8000f70 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f10:	2303      	movs	r3, #3
 8000f12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4819      	ldr	r0, [pc, #100]	; (8000f80 <HAL_ADC_MspInit+0xc4>)
 8000f1c:	f001 f86e 	bl	8001ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f22:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_ADC_MspInit+0xcc>)
 8000f24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f56:	f000 fe63 	bl	8001c20 <HAL_DMA_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000f60:	f7ff ff74 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f68:	621a      	str	r2, [r3, #32]
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_ADC_MspInit+0xc8>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40012400 	.word	0x40012400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	200000c4 	.word	0x200000c4
 8000f88:	40020008 	.word	0x40020008

08000f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <HAL_I2C_MspInit+0x70>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d123      	bne.n	8000ff4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_I2C_MspInit+0x74>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a13      	ldr	r2, [pc, #76]	; (8001000 <HAL_I2C_MspInit+0x74>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_I2C_MspInit+0x74>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc4:	23c0      	movs	r3, #192	; 0xc0
 8000fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc8:	2312      	movs	r3, #18
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <HAL_I2C_MspInit+0x78>)
 8000fd8:	f001 f810 	bl	8001ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_I2C_MspInit+0x74>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_I2C_MspInit+0x74>)
 8000fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe6:	61d3      	str	r3, [r2, #28]
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_I2C_MspInit+0x74>)
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40021000 	.word	0x40021000
 8001004:	40010c00 	.word	0x40010c00

08001008 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d10b      	bne.n	8001032 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_TIM_PWM_MspInit+0x34>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_TIM_PWM_MspInit+0x34>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_TIM_PWM_MspInit+0x34>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105e:	d12a      	bne.n	80010b6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_TIM_MspPostInit+0x80>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <HAL_TIM_MspPostInit+0x80>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_TIM_MspPostInit+0x80>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800107c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <HAL_TIM_MspPostInit+0x84>)
 800108e:	f000 ffb5 	bl	8001ffc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_TIM_MspPostInit+0x88>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_TIM_MspPostInit+0x88>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010000 	.word	0x40010000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <HardFault_Handler+0x4>

080010de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <BusFault_Handler+0x4>

080010ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 f88c 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
//	MenuButton_Flag.bits.B0 = SET;
	hMenuButton.buttonFlag.bit.B0 = SET; //Flag bit0 is set for interrupt detection flag
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <EXTI4_IRQHandler+0x18>)
 8001126:	7993      	ldrb	r3, [r2, #6]
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	7193      	strb	r3, [r2, #6]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800112e:	2010      	movs	r0, #16
 8001130:	f001 f8ee 	bl	8002310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000008c 	.word	0x2000008c

0800113c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <DMA1_Channel1_IRQHandler+0x10>)
 8001142:	f000 fe27 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000c4 	.word	0x200000c4

08001150 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001182:	f7ff ffe5 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f002 fdfd 	bl	8003d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118a:	f7fe ffdf 	bl	800014c <main>
  bx lr
 800118e:	4770      	bx	lr
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001198:	08003e28 	.word	0x08003e28
  ldr r2, =_sbss
 800119c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80011a0:	20000154 	.word	0x20000154

080011a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_2_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_Init+0x28>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x28>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 fcef 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fe48 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd07 	bl	8001c06 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 fccf 	bl	8001bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000010 	.word	0x20000010
 800122c:	20000018 	.word	0x20000018
 8001230:	20000014 	.word	0x20000014

08001234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x1c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_IncTick+0x20>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a03      	ldr	r2, [pc, #12]	; (8001254 <HAL_IncTick+0x20>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000018 	.word	0x20000018
 8001254:	20000150 	.word	0x20000150

08001258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <HAL_GetTick+0x10>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000150 	.word	0x20000150

0800126c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0be      	b.n	800140c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fe06 	bl	8000ebc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 faff 	bl	80018b4 <ADC_ConversionStop_Disable>
 80012b6:	4603      	mov	r3, r0
 80012b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 8099 	bne.w	80013fa <HAL_ADC_Init+0x18e>
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 8095 	bne.w	80013fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012d8:	f023 0302 	bic.w	r3, r3, #2
 80012dc:	f043 0202 	orr.w	r2, r3, #2
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7b1b      	ldrb	r3, [r3, #12]
 80012f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001304:	d003      	beq.n	800130e <HAL_ADC_Init+0xa2>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d102      	bne.n	8001314 <HAL_ADC_Init+0xa8>
 800130e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001312:	e000      	b.n	8001316 <HAL_ADC_Init+0xaa>
 8001314:	2300      	movs	r3, #0
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7d1b      	ldrb	r3, [r3, #20]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d119      	bne.n	8001358 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7b1b      	ldrb	r3, [r3, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d109      	bne.n	8001340 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	3b01      	subs	r3, #1
 8001332:	035a      	lsls	r2, r3, #13
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	e00b      	b.n	8001358 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001344:	f043 0220 	orr.w	r2, r3, #32
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	f043 0201 	orr.w	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	430a      	orrs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <HAL_ADC_Init+0x1a8>)
 8001374:	4013      	ands	r3, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	430b      	orrs	r3, r1
 800137e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001388:	d003      	beq.n	8001392 <HAL_ADC_Init+0x126>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d104      	bne.n	800139c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	3b01      	subs	r3, #1
 8001398:	051b      	lsls	r3, r3, #20
 800139a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_ADC_Init+0x1ac>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d10b      	bne.n	80013d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013d6:	e018      	b.n	800140a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	f023 0312 	bic.w	r3, r3, #18
 80013e0:	f043 0210 	orr.w	r2, r3, #16
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013f8:	e007      	b.n	800140a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	f043 0210 	orr.w	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800140a:	7dfb      	ldrb	r3, [r7, #23]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	ffe1f7fd 	.word	0xffe1f7fd
 8001418:	ff1f0efe 	.word	0xff1f0efe

0800141c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a64      	ldr	r2, [pc, #400]	; (80015c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d004      	beq.n	8001440 <HAL_ADC_Start_DMA+0x24>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a63      	ldr	r2, [pc, #396]	; (80015c8 <HAL_ADC_Start_DMA+0x1ac>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d106      	bne.n	800144e <HAL_ADC_Start_DMA+0x32>
 8001440:	4b60      	ldr	r3, [pc, #384]	; (80015c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 80b3 	bne.w	80015b4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_ADC_Start_DMA+0x40>
 8001458:	2302      	movs	r3, #2
 800145a:	e0ae      	b.n	80015ba <HAL_ADC_Start_DMA+0x19e>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 f9cb 	bl	8001800 <ADC_Enable>
 800146a:	4603      	mov	r3, r0
 800146c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f040 809a 	bne.w	80015aa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a4e      	ldr	r2, [pc, #312]	; (80015c8 <HAL_ADC_Start_DMA+0x1ac>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d105      	bne.n	80014a0 <HAL_ADC_Start_DMA+0x84>
 8001494:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d115      	bne.n	80014cc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d026      	beq.n	8001508 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ca:	e01d      	b.n	8001508 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a39      	ldr	r2, [pc, #228]	; (80015c4 <HAL_ADC_Start_DMA+0x1a8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d004      	beq.n	80014ec <HAL_ADC_Start_DMA+0xd0>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_ADC_Start_DMA+0x1ac>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d10d      	bne.n	8001508 <HAL_ADC_Start_DMA+0xec>
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <HAL_ADC_Start_DMA+0x1a8>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001500:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	f023 0206 	bic.w	r2, r3, #6
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001520:	e002      	b.n	8001528 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a25      	ldr	r2, [pc, #148]	; (80015cc <HAL_ADC_Start_DMA+0x1b0>)
 8001536:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a24      	ldr	r2, [pc, #144]	; (80015d0 <HAL_ADC_Start_DMA+0x1b4>)
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <HAL_ADC_Start_DMA+0x1b8>)
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0202 	mvn.w	r2, #2
 8001550:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001560:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a18      	ldr	r0, [r3, #32]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	334c      	adds	r3, #76	; 0x4c
 800156c:	4619      	mov	r1, r3
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f000 fbaf 	bl	8001cd4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001580:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001584:	d108      	bne.n	8001598 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001594:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001596:	e00f      	b.n	80015b8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015a6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015a8:	e006      	b.n	80015b8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80015b2:	e001      	b.n	80015b8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012400 	.word	0x40012400
 80015c8:	40012800 	.word	0x40012800
 80015cc:	08001937 	.word	0x08001937
 80015d0:	080019b3 	.word	0x080019b3
 80015d4:	080019cf 	.word	0x080019cf

080015d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
	...

08001610 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x20>
 800162c:	2302      	movs	r3, #2
 800162e:	e0dc      	b.n	80017ea <HAL_ADC_ConfigChannel+0x1da>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b06      	cmp	r3, #6
 800163e:	d81c      	bhi.n	800167a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b05      	subs	r3, #5
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	4019      	ands	r1, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b05      	subs	r3, #5
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
 8001678:	e03c      	b.n	80016f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d81c      	bhi.n	80016bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	3b23      	subs	r3, #35	; 0x23
 8001694:	221f      	movs	r2, #31
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	4019      	ands	r1, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b23      	subs	r3, #35	; 0x23
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ba:	e01b      	b.n	80016f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b41      	subs	r3, #65	; 0x41
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4019      	ands	r1, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b41      	subs	r3, #65	; 0x41
 80016e8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	d91c      	bls.n	8001736 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3b1e      	subs	r3, #30
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	4019      	ands	r1, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6898      	ldr	r0, [r3, #8]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	3b1e      	subs	r3, #30
 8001728:	fa00 f203 	lsl.w	r2, r0, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	e019      	b.n	800176a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6919      	ldr	r1, [r3, #16]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	2207      	movs	r2, #7
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6898      	ldr	r0, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	fa00 f203 	lsl.w	r2, r0, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d003      	beq.n	800177a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001776:	2b11      	cmp	r3, #17
 8001778:	d132      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d125      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d126      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d11a      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <HAL_ADC_ConfigChannel+0x1ec>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9a      	lsrs	r2, r3, #18
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x1b2>
 80017ce:	e007      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f043 0220 	orr.w	r2, r3, #32
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40012400 	.word	0x40012400
 80017f8:	20000010 	.word	0x20000010
 80017fc:	431bde83 	.word	0x431bde83

08001800 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b01      	cmp	r3, #1
 800181c:	d040      	beq.n	80018a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <ADC_Enable+0xac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <ADC_Enable+0xb0>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	0c9b      	lsrs	r3, r3, #18
 800183a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800183c:	e002      	b.n	8001844 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800184a:	f7ff fd05 	bl	8001258 <HAL_GetTick>
 800184e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001850:	e01f      	b.n	8001892 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001852:	f7ff fd01 	bl	8001258 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d918      	bls.n	8001892 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d011      	beq.n	8001892 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	f043 0210 	orr.w	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e007      	b.n	80018a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d1d8      	bne.n	8001852 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000010 	.word	0x20000010
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d12e      	bne.n	800192c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018de:	f7ff fcbb 	bl	8001258 <HAL_GetTick>
 80018e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018e4:	e01b      	b.n	800191e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018e6:	f7ff fcb7 	bl	8001258 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d914      	bls.n	800191e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10d      	bne.n	800191e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e007      	b.n	800192e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d0dc      	beq.n	80018e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800194c:	2b00      	cmp	r3, #0
 800194e:	d127      	bne.n	80019a0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001966:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800196a:	d115      	bne.n	8001998 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001970:	2b00      	cmp	r3, #0
 8001972:	d111      	bne.n	8001998 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fe1d 	bl	80015d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800199e:	e004      	b.n	80019aa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fe12 	bl	80015ea <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f043 0204 	orr.w	r2, r3, #4
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fe01 	bl	80015fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4906      	ldr	r1, [pc, #24]	; (8001a9c <__NVIC_EnableIRQ+0x34>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b68:	d301      	bcc.n	8001b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <SysTick_Config+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b76:	210f      	movs	r1, #15
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f7ff ff90 	bl	8001aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SysTick_Config+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SysTick_Config+0x40>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff2d 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff42 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff90 	bl	8001af4 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5f 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff35 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffa2 	bl	8001b58 <SysTick_Config>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e043      	b.n	8001cbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_DMA_Init+0xa8>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_DMA_Init+0xac>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	009a      	lsls	r2, r3, #2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_DMA_Init+0xb0>)
 8001c52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	bffdfff8 	.word	0xbffdfff8
 8001ccc:	cccccccd 	.word	0xcccccccd
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_DMA_Start_IT+0x20>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e04a      	b.n	8001d8a <HAL_DMA_Start_IT+0xb6>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d13a      	bne.n	8001d7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f938 	bl	8001fa0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 020e 	orr.w	r2, r2, #14
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e00f      	b.n	8001d6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0204 	bic.w	r2, r2, #4
 8001d58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 020a 	orr.w	r2, r2, #10
 8001d68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e005      	b.n	8001d88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
 8001d86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2204      	movs	r2, #4
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d04f      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xc8>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d04a      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0204 	bic.w	r2, r2, #4
 8001de2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a66      	ldr	r2, [pc, #408]	; (8001f84 <HAL_DMA_IRQHandler+0x1f0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d029      	beq.n	8001e42 <HAL_DMA_IRQHandler+0xae>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <HAL_DMA_IRQHandler+0x1f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xaa>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a63      	ldr	r2, [pc, #396]	; (8001f8c <HAL_DMA_IRQHandler+0x1f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0xa4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a62      	ldr	r2, [pc, #392]	; (8001f90 <HAL_DMA_IRQHandler+0x1fc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d012      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x9e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a60      	ldr	r2, [pc, #384]	; (8001f94 <HAL_DMA_IRQHandler+0x200>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00a      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x98>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5f      	ldr	r2, [pc, #380]	; (8001f98 <HAL_DMA_IRQHandler+0x204>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d102      	bne.n	8001e26 <HAL_DMA_IRQHandler+0x92>
 8001e20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e24:	e00e      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e2a:	e00b      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e30:	e008      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e36:	e005      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3c:	e002      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e3e:	2340      	movs	r3, #64	; 0x40
 8001e40:	e000      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e42:	2304      	movs	r3, #4
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_DMA_IRQHandler+0x208>)
 8001e46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8094 	beq.w	8001f7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e5a:	e08e      	b.n	8001f7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2202      	movs	r2, #2
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d056      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x186>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d051      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 020a 	bic.w	r2, r2, #10
 8001e92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a38      	ldr	r2, [pc, #224]	; (8001f84 <HAL_DMA_IRQHandler+0x1f0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d029      	beq.n	8001efa <HAL_DMA_IRQHandler+0x166>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_DMA_IRQHandler+0x1f4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d022      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x162>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a35      	ldr	r2, [pc, #212]	; (8001f8c <HAL_DMA_IRQHandler+0x1f8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01a      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x15c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <HAL_DMA_IRQHandler+0x1fc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d012      	beq.n	8001eea <HAL_DMA_IRQHandler+0x156>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <HAL_DMA_IRQHandler+0x200>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00a      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x150>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <HAL_DMA_IRQHandler+0x204>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d102      	bne.n	8001ede <HAL_DMA_IRQHandler+0x14a>
 8001ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001edc:	e00e      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee2:	e00b      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	e008      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eee:	e005      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef4:	e002      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e000      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001efa:	2302      	movs	r3, #2
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_DMA_IRQHandler+0x208>)
 8001efe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d034      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f18:	e02f      	b.n	8001f7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2208      	movs	r2, #8
 8001f20:	409a      	lsls	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d028      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x1e8>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d023      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 020e 	bic.w	r2, r2, #14
 8001f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
    }
  }
  return;
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
}
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40020008 	.word	0x40020008
 8001f88:	4002001c 	.word	0x4002001c
 8001f8c:	40020030 	.word	0x40020030
 8001f90:	40020044 	.word	0x40020044
 8001f94:	40020058 	.word	0x40020058
 8001f98:	4002006c 	.word	0x4002006c
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d108      	bne.n	8001fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fde:	e007      	b.n	8001ff0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	60da      	str	r2, [r3, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b08b      	sub	sp, #44	; 0x2c
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200e:	e127      	b.n	8002260 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002010:	2201      	movs	r2, #1
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	429a      	cmp	r2, r3
 800202a:	f040 8116 	bne.w	800225a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d034      	beq.n	80020a0 <HAL_GPIO_Init+0xa4>
 8002036:	2b12      	cmp	r3, #18
 8002038:	d80d      	bhi.n	8002056 <HAL_GPIO_Init+0x5a>
 800203a:	2b02      	cmp	r3, #2
 800203c:	d02b      	beq.n	8002096 <HAL_GPIO_Init+0x9a>
 800203e:	2b02      	cmp	r3, #2
 8002040:	d804      	bhi.n	800204c <HAL_GPIO_Init+0x50>
 8002042:	2b00      	cmp	r3, #0
 8002044:	d031      	beq.n	80020aa <HAL_GPIO_Init+0xae>
 8002046:	2b01      	cmp	r3, #1
 8002048:	d01c      	beq.n	8002084 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800204a:	e048      	b.n	80020de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800204c:	2b03      	cmp	r3, #3
 800204e:	d043      	beq.n	80020d8 <HAL_GPIO_Init+0xdc>
 8002050:	2b11      	cmp	r3, #17
 8002052:	d01b      	beq.n	800208c <HAL_GPIO_Init+0x90>
          break;
 8002054:	e043      	b.n	80020de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002056:	4a89      	ldr	r2, [pc, #548]	; (800227c <HAL_GPIO_Init+0x280>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d026      	beq.n	80020aa <HAL_GPIO_Init+0xae>
 800205c:	4a87      	ldr	r2, [pc, #540]	; (800227c <HAL_GPIO_Init+0x280>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d806      	bhi.n	8002070 <HAL_GPIO_Init+0x74>
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <HAL_GPIO_Init+0x284>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d020      	beq.n	80020aa <HAL_GPIO_Init+0xae>
 8002068:	4a86      	ldr	r2, [pc, #536]	; (8002284 <HAL_GPIO_Init+0x288>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01d      	beq.n	80020aa <HAL_GPIO_Init+0xae>
          break;
 800206e:	e036      	b.n	80020de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002070:	4a85      	ldr	r2, [pc, #532]	; (8002288 <HAL_GPIO_Init+0x28c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_GPIO_Init+0xae>
 8002076:	4a85      	ldr	r2, [pc, #532]	; (800228c <HAL_GPIO_Init+0x290>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d016      	beq.n	80020aa <HAL_GPIO_Init+0xae>
 800207c:	4a84      	ldr	r2, [pc, #528]	; (8002290 <HAL_GPIO_Init+0x294>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0xae>
          break;
 8002082:	e02c      	b.n	80020de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e028      	b.n	80020de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	3304      	adds	r3, #4
 8002092:	623b      	str	r3, [r7, #32]
          break;
 8002094:	e023      	b.n	80020de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	3308      	adds	r3, #8
 800209c:	623b      	str	r3, [r7, #32]
          break;
 800209e:	e01e      	b.n	80020de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	330c      	adds	r3, #12
 80020a6:	623b      	str	r3, [r7, #32]
          break;
 80020a8:	e019      	b.n	80020de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020b2:	2304      	movs	r3, #4
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e012      	b.n	80020de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c0:	2308      	movs	r3, #8
 80020c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	611a      	str	r2, [r3, #16]
          break;
 80020ca:	e008      	b.n	80020de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020cc:	2308      	movs	r3, #8
 80020ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	615a      	str	r2, [r3, #20]
          break;
 80020d6:	e002      	b.n	80020de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2bff      	cmp	r3, #255	; 0xff
 80020e2:	d801      	bhi.n	80020e8 <HAL_GPIO_Init+0xec>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	e001      	b.n	80020ec <HAL_GPIO_Init+0xf0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2bff      	cmp	r3, #255	; 0xff
 80020f2:	d802      	bhi.n	80020fa <HAL_GPIO_Init+0xfe>
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x104>
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	3b08      	subs	r3, #8
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	210f      	movs	r1, #15
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	401a      	ands	r2, r3
 8002112:	6a39      	ldr	r1, [r7, #32]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	431a      	orrs	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8096 	beq.w	800225a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_GPIO_Init+0x298>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_GPIO_Init+0x298>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6193      	str	r3, [r2, #24]
 800213a:	4b56      	ldr	r3, [pc, #344]	; (8002294 <HAL_GPIO_Init+0x298>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002146:	4a54      	ldr	r2, [pc, #336]	; (8002298 <HAL_GPIO_Init+0x29c>)
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4b      	ldr	r2, [pc, #300]	; (800229c <HAL_GPIO_Init+0x2a0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_GPIO_Init+0x19e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <HAL_GPIO_Init+0x2a4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00d      	beq.n	8002196 <HAL_GPIO_Init+0x19a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a49      	ldr	r2, [pc, #292]	; (80022a4 <HAL_GPIO_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <HAL_GPIO_Init+0x196>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a48      	ldr	r2, [pc, #288]	; (80022a8 <HAL_GPIO_Init+0x2ac>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_GPIO_Init+0x192>
 800218a:	2303      	movs	r3, #3
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x1a0>
 800218e:	2304      	movs	r3, #4
 8002190:	e004      	b.n	800219c <HAL_GPIO_Init+0x1a0>
 8002192:	2302      	movs	r3, #2
 8002194:	e002      	b.n	800219c <HAL_GPIO_Init+0x1a0>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_GPIO_Init+0x1a0>
 800219a:	2300      	movs	r3, #0
 800219c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219e:	f002 0203 	and.w	r2, r2, #3
 80021a2:	0092      	lsls	r2, r2, #2
 80021a4:	4093      	lsls	r3, r2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ac:	493a      	ldr	r1, [pc, #232]	; (8002298 <HAL_GPIO_Init+0x29c>)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4938      	ldr	r1, [pc, #224]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
 80021d2:	e006      	b.n	80021e2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	43db      	mvns	r3, r3
 80021dc:	4933      	ldr	r1, [pc, #204]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 80021de:	4013      	ands	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021ee:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	492e      	ldr	r1, [pc, #184]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	43db      	mvns	r3, r3
 8002204:	4929      	ldr	r1, [pc, #164]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 8002206:	4013      	ands	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	4924      	ldr	r1, [pc, #144]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	43db      	mvns	r3, r3
 800222c:	491f      	ldr	r1, [pc, #124]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 800222e:	4013      	ands	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	491a      	ldr	r1, [pc, #104]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	60cb      	str	r3, [r1, #12]
 800224a:	e006      	b.n	800225a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	43db      	mvns	r3, r3
 8002254:	4915      	ldr	r1, [pc, #84]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 8002256:	4013      	ands	r3, r2
 8002258:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	3301      	adds	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	f47f aed0 	bne.w	8002010 <HAL_GPIO_Init+0x14>
  }
}
 8002270:	bf00      	nop
 8002272:	372c      	adds	r7, #44	; 0x2c
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	10210000 	.word	0x10210000
 8002280:	10110000 	.word	0x10110000
 8002284:	10120000 	.word	0x10120000
 8002288:	10310000 	.word	0x10310000
 800228c:	10320000 	.word	0x10320000
 8002290:	10220000 	.word	0x10220000
 8002294:	40021000 	.word	0x40021000
 8002298:	40010000 	.word	0x40010000
 800229c:	40010800 	.word	0x40010800
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	40011000 	.word	0x40011000
 80022a8:	40011400 	.word	0x40011400
 80022ac:	40010400 	.word	0x40010400

080022b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e001      	b.n	80022d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	807b      	strh	r3, [r7, #2]
 80022ea:	4613      	mov	r3, r2
 80022ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ee:	787b      	ldrb	r3, [r7, #1]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f4:	887a      	ldrh	r2, [r7, #2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022fa:	e003      	b.n	8002304 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	041a      	lsls	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	611a      	str	r2, [r3, #16]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
	...

08002310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f806 	bl	8002340 <HAL_GPIO_EXTI_Callback>
  }
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e11f      	b.n	80025a6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fe06 	bl	8000f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b8:	f000 ffe0 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 80023bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a7b      	ldr	r2, [pc, #492]	; (80025b0 <HAL_I2C_Init+0x25c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d807      	bhi.n	80023d8 <HAL_I2C_Init+0x84>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_I2C_Init+0x260>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	bf94      	ite	ls
 80023d0:	2301      	movls	r3, #1
 80023d2:	2300      	movhi	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e006      	b.n	80023e6 <HAL_I2C_Init+0x92>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a77      	ldr	r2, [pc, #476]	; (80025b8 <HAL_I2C_Init+0x264>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf94      	ite	ls
 80023e0:	2301      	movls	r3, #1
 80023e2:	2300      	movhi	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0db      	b.n	80025a6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a72      	ldr	r2, [pc, #456]	; (80025bc <HAL_I2C_Init+0x268>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a64      	ldr	r2, [pc, #400]	; (80025b0 <HAL_I2C_Init+0x25c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d802      	bhi.n	8002428 <HAL_I2C_Init+0xd4>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3301      	adds	r3, #1
 8002426:	e009      	b.n	800243c <HAL_I2C_Init+0xe8>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	4a63      	ldr	r2, [pc, #396]	; (80025c0 <HAL_I2C_Init+0x26c>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	3301      	adds	r3, #1
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	430b      	orrs	r3, r1
 8002442:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800244e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4956      	ldr	r1, [pc, #344]	; (80025b0 <HAL_I2C_Init+0x25c>)
 8002458:	428b      	cmp	r3, r1
 800245a:	d80d      	bhi.n	8002478 <HAL_I2C_Init+0x124>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e59      	subs	r1, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fbb1 f3f3 	udiv	r3, r1, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	2b04      	cmp	r3, #4
 8002472:	bf38      	it	cc
 8002474:	2304      	movcc	r3, #4
 8002476:	e04f      	b.n	8002518 <HAL_I2C_Init+0x1c4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d111      	bne.n	80024a4 <HAL_I2C_Init+0x150>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1e58      	subs	r0, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	440b      	add	r3, r1
 800248e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002492:	3301      	adds	r3, #1
 8002494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e012      	b.n	80024ca <HAL_I2C_Init+0x176>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e58      	subs	r0, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	0099      	lsls	r1, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_I2C_Init+0x17e>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e022      	b.n	8002518 <HAL_I2C_Init+0x1c4>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10e      	bne.n	80024f8 <HAL_I2C_Init+0x1a4>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1e58      	subs	r0, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	440b      	add	r3, r1
 80024e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f6:	e00f      	b.n	8002518 <HAL_I2C_Init+0x1c4>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1e58      	subs	r0, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	0099      	lsls	r1, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	fbb0 f3f3 	udiv	r3, r0, r3
 800250e:	3301      	adds	r3, #1
 8002510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	6809      	ldr	r1, [r1, #0]
 800251c:	4313      	orrs	r3, r2
 800251e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69da      	ldr	r2, [r3, #28]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002546:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6911      	ldr	r1, [r2, #16]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68d2      	ldr	r2, [r2, #12]
 8002552:	4311      	orrs	r1, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	430b      	orrs	r3, r1
 800255a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	000186a0 	.word	0x000186a0
 80025b4:	001e847f 	.word	0x001e847f
 80025b8:	003d08ff 	.word	0x003d08ff
 80025bc:	431bde83 	.word	0x431bde83
 80025c0:	10624dd3 	.word	0x10624dd3

080025c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	460b      	mov	r3, r1
 80025d2:	817b      	strh	r3, [r7, #10]
 80025d4:	4613      	mov	r3, r2
 80025d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7fe fe3e 	bl	8001258 <HAL_GetTick>
 80025dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	f040 80e0 	bne.w	80027ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2319      	movs	r3, #25
 80025f2:	2201      	movs	r2, #1
 80025f4:	4970      	ldr	r1, [pc, #448]	; (80027b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f964 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	e0d3      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_I2C_Master_Transmit+0x50>
 8002610:	2302      	movs	r3, #2
 8002612:	e0cc      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1ea>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d007      	beq.n	800263a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002648:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2210      	movs	r2, #16
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	893a      	ldrh	r2, [r7, #8]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_I2C_Master_Transmit+0x1f8>)
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f89c 	bl	80027c0 <I2C_MasterRequestWrite>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e08d      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026a8:	e066      	b.n	8002778 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f9de 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d107      	bne.n	80026d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06b      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d11b      	bne.n	800274c <HAL_I2C_Master_Transmit+0x188>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	6a39      	ldr	r1, [r7, #32]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f9ce 	bl	8002af2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2b04      	cmp	r3, #4
 8002762:	d107      	bne.n	8002774 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002772:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e01a      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	2b00      	cmp	r3, #0
 800277e:	d194      	bne.n	80026aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	00100002 	.word	0x00100002
 80027bc:	ffff0000 	.word	0xffff0000

080027c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	460b      	mov	r3, r1
 80027ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d006      	beq.n	80027ea <I2C_MasterRequestWrite+0x2a>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d003      	beq.n	80027ea <I2C_MasterRequestWrite+0x2a>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027e8:	d108      	bne.n	80027fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e00b      	b.n	8002814 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2b12      	cmp	r3, #18
 8002802:	d107      	bne.n	8002814 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002812:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f84f 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283a:	d103      	bne.n	8002844 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e035      	b.n	80028b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002850:	d108      	bne.n	8002864 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	e01b      	b.n	800289c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002864:	897b      	ldrh	r3, [r7, #10]
 8002866:	11db      	asrs	r3, r3, #7
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f003 0306 	and.w	r3, r3, #6
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f063 030f 	orn	r3, r3, #15
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	490e      	ldr	r1, [pc, #56]	; (80028bc <I2C_MasterRequestWrite+0xfc>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f875 	bl	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e010      	b.n	80028b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4907      	ldr	r1, [pc, #28]	; (80028c0 <I2C_MasterRequestWrite+0x100>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f865 	bl	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	00010008 	.word	0x00010008
 80028c0:	00010002 	.word	0x00010002

080028c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d4:	e025      	b.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d021      	beq.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7fe fcbb 	bl	8001258 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d116      	bne.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f043 0220 	orr.w	r2, r3, #32
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e023      	b.n	800296a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10d      	bne.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x84>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	e00c      	b.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	429a      	cmp	r2, r3
 8002966:	d0b6      	beq.n	80028d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002980:	e051      	b.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	d123      	bne.n	80029da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f043 0204 	orr.w	r2, r3, #4
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e046      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d021      	beq.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7fe fc39 	bl	8001258 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d116      	bne.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e020      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10c      	bne.n	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	e00b      	b.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d18d      	bne.n	8002982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f878 	bl	8002b74 <I2C_IsAcknowledgeFailed>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e02d      	b.n	8002aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d021      	beq.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7fe fbdf 	bl	8001258 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e007      	b.n	8002aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d1ca      	bne.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afe:	e02d      	b.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f837 	bl	8002b74 <I2C_IsAcknowledgeFailed>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e02d      	b.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d021      	beq.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	f7fe fb9e 	bl	8001258 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d302      	bcc.n	8002b2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e007      	b.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d1ca      	bne.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d11b      	bne.n	8002bc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f043 0204 	orr.w	r2, r3, #4
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e26c      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf0:	4b92      	ldr	r3, [pc, #584]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d00c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bfc:	4b8f      	ldr	r3, [pc, #572]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d112      	bne.n	8002c2e <HAL_RCC_OscConfig+0x5e>
 8002c08:	4b8c      	ldr	r3, [pc, #560]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c16:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d06c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x12c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d168      	bne.n	8002cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e246      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x76>
 8002c38:	4b80      	ldr	r3, [pc, #512]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a7f      	ldr	r2, [pc, #508]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e02e      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7a      	ldr	r2, [pc, #488]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a77      	ldr	r2, [pc, #476]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e01d      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0xbc>
 8002c72:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a71      	ldr	r2, [pc, #452]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6e      	ldr	r2, [pc, #440]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c8c:	4b6b      	ldr	r3, [pc, #428]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6a      	ldr	r2, [pc, #424]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe fad4 	bl	8001258 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fad0 	bl	8001258 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1fa      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b5d      	ldr	r3, [pc, #372]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe4>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fac0 	bl	8001258 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fabc 	bl	8001258 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1e6      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x10c>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0a:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d16:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d11c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x18c>
 8002d22:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x176>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1ba      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4939      	ldr	r1, [pc, #228]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	e03a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x270>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fa75 	bl	8001258 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe fa71 	bl	8001258 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e19b      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4927      	ldr	r1, [pc, #156]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
 8002da4:	e015      	b.n	8002dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da6:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_RCC_OscConfig+0x270>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fa54 	bl	8001258 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db4:	f7fe fa50 	bl	8001258 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e17a      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03a      	beq.n	8002e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d019      	beq.n	8002e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe fa34 	bl	8001258 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe fa30 	bl	8001258 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e15a      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e12:	2001      	movs	r0, #1
 8002e14:	f000 fac6 	bl	80033a4 <RCC_Delay>
 8002e18:	e01c      	b.n	8002e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7fe fa1a 	bl	8001258 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e26:	e00f      	b.n	8002e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7fe fa16 	bl	8001258 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d908      	bls.n	8002e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e140      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	42420000 	.word	0x42420000
 8002e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b9e      	ldr	r3, [pc, #632]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e9      	bne.n	8002e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a6 	beq.w	8002fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b97      	ldr	r3, [pc, #604]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10d      	bne.n	8002e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b94      	ldr	r3, [pc, #592]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a93      	ldr	r2, [pc, #588]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]
 8002e7e:	4b91      	ldr	r3, [pc, #580]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_RCC_OscConfig+0x4f8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d118      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <HAL_RCC_OscConfig+0x4f8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a8a      	ldr	r2, [pc, #552]	; (80030c8 <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f9d7 	bl	8001258 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7fe f9d3 	bl	8001258 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	; 0x64
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0fd      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	4b81      	ldr	r3, [pc, #516]	; (80030c8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x312>
 8002ed4:	4b7b      	ldr	r3, [pc, #492]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a7a      	ldr	r2, [pc, #488]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	e02d      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x334>
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a72      	ldr	r2, [pc, #456]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	e01c      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d10c      	bne.n	8002f26 <HAL_RCC_OscConfig+0x356>
 8002f0c:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a6c      	ldr	r2, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	e00b      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002f26:	4b67      	ldr	r3, [pc, #412]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a66      	ldr	r2, [pc, #408]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	4b64      	ldr	r3, [pc, #400]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a63      	ldr	r2, [pc, #396]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d015      	beq.n	8002f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fe f987 	bl	8001258 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe f983 	bl	8001258 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0ab      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ee      	beq.n	8002f4e <HAL_RCC_OscConfig+0x37e>
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fe f971 	bl	8001258 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe f96d 	bl	8001258 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e095      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ee      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b48      	ldr	r3, [pc, #288]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4a47      	ldr	r2, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8081 	beq.w	80030ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb8:	4b42      	ldr	r3, [pc, #264]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d061      	beq.n	8003088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d146      	bne.n	800305a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_OscConfig+0x4fc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7fe f941 	bl	8001258 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fda:	f7fe f93d 	bl	8001258 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e067      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fec:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d108      	bne.n	8003014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	492d      	ldr	r1, [pc, #180]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a19      	ldr	r1, [r3, #32]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	430b      	orrs	r3, r1
 8003026:	4927      	ldr	r1, [pc, #156]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x4fc>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7fe f911 	bl	8001258 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe f90d 	bl	8001258 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e037      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x46a>
 8003058:	e02f      	b.n	80030ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <HAL_RCC_OscConfig+0x4fc>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe f8fa 	bl	8001258 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe f8f6 	bl	8001258 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e020      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x498>
 8003086:	e018      	b.n	80030ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e013      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40007000 	.word	0x40007000
 80030cc:	42420060 	.word	0x42420060

080030d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0d0      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d910      	bls.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	4965      	ldr	r1, [pc, #404]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800314e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d040      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e073      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06b      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4936      	ldr	r1, [pc, #216]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7fe f84a 	bl	8001258 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fe f846 	bl	8001258 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e053      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d210      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 0207 	bic.w	r2, r3, #7
 8003206:	4922      	ldr	r1, [pc, #136]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f821 	bl	80032a4 <HAL_RCC_GetSysClockFreq>
 8003262:	4601      	mov	r1, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	5cd3      	ldrb	r3, [r2, r3]
 8003272:	fa21 f303 	lsr.w	r3, r1, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1cc>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1d0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd ffa8 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40022000 	.word	0x40022000
 8003294:	40021000 	.word	0x40021000
 8003298:	08003e08 	.word	0x08003e08
 800329c:	20000010 	.word	0x20000010
 80032a0:	20000014 	.word	0x20000014

080032a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a4:	b490      	push	{r4, r7}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032aa:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032ac:	1d3c      	adds	r4, r7, #4
 80032ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032b4:	4b28      	ldr	r3, [pc, #160]	; (8003358 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x40>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x46>
 80032e2:	e02d      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032e6:	623b      	str	r3, [r7, #32]
      break;
 80032e8:	e02d      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032f6:	4413      	add	r3, r2
 80032f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003308:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_RCC_GetSysClockFreq+0xb8>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	0c5b      	lsrs	r3, r3, #17
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003316:	4413      	add	r3, r2
 8003318:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800331c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	4a0f      	ldr	r2, [pc, #60]	; (8003360 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003322:	fb02 f203 	mul.w	r2, r2, r3
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	e004      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	623b      	str	r3, [r7, #32]
      break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003342:	623b      	str	r3, [r7, #32]
      break;
 8003344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003346:	6a3b      	ldr	r3, [r7, #32]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3728      	adds	r7, #40	; 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc90      	pop	{r4, r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	08003df4 	.word	0x08003df4
 8003358:	08003e04 	.word	0x08003e04
 800335c:	40021000 	.word	0x40021000
 8003360:	007a1200 	.word	0x007a1200
 8003364:	003d0900 	.word	0x003d0900

08003368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800336c:	4b02      	ldr	r3, [pc, #8]	; (8003378 <HAL_RCC_GetHCLKFreq+0x10>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	20000010 	.word	0x20000010

0800337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003380:	f7ff fff2 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 8003384:	4601      	mov	r1, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	08003e18 	.word	0x08003e18

080033a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCC_Delay+0x34>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <RCC_Delay+0x38>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033c0:	bf00      	nop
  }
  while (Delay --);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e5a      	subs	r2, r3, #1
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f9      	bne.n	80033c0 <RCC_Delay+0x1c>
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000010 	.word	0x20000010
 80033dc:	10624dd3 	.word	0x10624dd3

080033e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d07d      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003400:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4a4b      	ldr	r2, [pc, #300]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	61d3      	str	r3, [r2, #28]
 8003418:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d118      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003434:	4b43      	ldr	r3, [pc, #268]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a42      	ldr	r2, [pc, #264]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003440:	f7fd ff0a 	bl	8001258 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	e008      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003448:	f7fd ff06 	bl	8001258 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e06d      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d02e      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d027      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800349a:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d014      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fd fed5 	bl	8001258 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fd fed1 	bl	8001258 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e036      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4917      	ldr	r1, [pc, #92]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	490b      	ldr	r1, [pc, #44]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4904      	ldr	r1, [pc, #16]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
 8003548:	42420440 	.word	0x42420440

0800354c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e041      	b.n	80035e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fd48 	bl	8001008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f000 f98e 	bl	80038ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_TIM_PWM_Start+0x24>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e022      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d109      	bne.n	800362a <HAL_TIM_PWM_Start+0x3e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e015      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d109      	bne.n	8003644 <HAL_TIM_PWM_Start+0x58>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e008      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e05e      	b.n	800371c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <HAL_TIM_PWM_Start+0x82>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	e013      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d104      	bne.n	800367e <HAL_TIM_PWM_Start+0x92>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	e00b      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d104      	bne.n	800368e <HAL_TIM_PWM_Start+0xa2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368c:	e003      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 faee 	bl	8003c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_TIM_PWM_Start+0x138>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d107      	bne.n	80036be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a18      	ldr	r2, [pc, #96]	; (8003724 <HAL_TIM_PWM_Start+0x138>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_TIM_PWM_Start+0xfa>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d009      	beq.n	80036e6 <HAL_TIM_PWM_Start+0xfa>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a14      	ldr	r2, [pc, #80]	; (8003728 <HAL_TIM_PWM_Start+0x13c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_TIM_PWM_Start+0xfa>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <HAL_TIM_PWM_Start+0x140>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d111      	bne.n	800370a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d010      	beq.n	800371a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003708:	e007      	b.n	800371a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0201 	orr.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800

08003730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003746:	2302      	movs	r3, #2
 8003748:	e0ac      	b.n	80038a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	f200 809f 	bhi.w	8003898 <HAL_TIM_PWM_ConfigChannel+0x168>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003795 	.word	0x08003795
 8003764:	08003899 	.word	0x08003899
 8003768:	08003899 	.word	0x08003899
 800376c:	08003899 	.word	0x08003899
 8003770:	080037d5 	.word	0x080037d5
 8003774:	08003899 	.word	0x08003899
 8003778:	08003899 	.word	0x08003899
 800377c:	08003899 	.word	0x08003899
 8003780:	08003817 	.word	0x08003817
 8003784:	08003899 	.word	0x08003899
 8003788:	08003899 	.word	0x08003899
 800378c:	08003899 	.word	0x08003899
 8003790:	08003857 	.word	0x08003857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f8e8 	bl	8003970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0208 	orr.w	r2, r2, #8
 80037ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0204 	bic.w	r2, r2, #4
 80037be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6999      	ldr	r1, [r3, #24]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	619a      	str	r2, [r3, #24]
      break;
 80037d2:	e062      	b.n	800389a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f92e 	bl	8003a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	021a      	lsls	r2, r3, #8
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	619a      	str	r2, [r3, #24]
      break;
 8003814:	e041      	b.n	800389a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f977 	bl	8003b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0208 	orr.w	r2, r2, #8
 8003830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0204 	bic.w	r2, r2, #4
 8003840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69d9      	ldr	r1, [r3, #28]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
      break;
 8003854:	e021      	b.n	800389a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f9c1 	bl	8003be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69d9      	ldr	r1, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	021a      	lsls	r2, r3, #8
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	61da      	str	r2, [r3, #28]
      break;
 8003896:	e000      	b.n	800389a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a29      	ldr	r2, [pc, #164]	; (8003964 <TIM_Base_SetConfig+0xb8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a26      	ldr	r2, [pc, #152]	; (8003968 <TIM_Base_SetConfig+0xbc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a25      	ldr	r2, [pc, #148]	; (800396c <TIM_Base_SetConfig+0xc0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <TIM_Base_SetConfig+0xb8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00b      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d007      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <TIM_Base_SetConfig+0xbc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <TIM_Base_SetConfig+0xc0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a07      	ldr	r2, [pc, #28]	; (8003964 <TIM_Base_SetConfig+0xb8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d103      	bne.n	8003954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	615a      	str	r2, [r3, #20]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800

08003970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <TIM_OC1_SetConfig+0xc8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10c      	bne.n	80039e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0308 	bic.w	r3, r3, #8
 80039d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <TIM_OC1_SetConfig+0xc8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d111      	bne.n	8003a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	621a      	str	r2, [r3, #32]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40012c00 	.word	0x40012c00

08003a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0210 	bic.w	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0320 	bic.w	r3, r3, #32
 8003a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <TIM_OC2_SetConfig+0xd0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10d      	bne.n	8003ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <TIM_OC2_SetConfig+0xd0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d113      	bne.n	8003ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00

08003b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <TIM_OC3_SetConfig+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10d      	bne.n	8003b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_OC3_SetConfig+0xd0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d113      	bne.n	8003bba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00

08003be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0f      	ldr	r2, [pc, #60]	; (8003c7c <TIM_OC4_SetConfig+0x98>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d109      	bne.n	8003c58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00

08003c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2201      	movs	r2, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1a      	ldr	r2, [r3, #32]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1a      	ldr	r2, [r3, #32]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e046      	b.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2c:	d009      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10c      	bne.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800

08003d84 <__libc_init_array>:
 8003d84:	b570      	push	{r4, r5, r6, lr}
 8003d86:	2500      	movs	r5, #0
 8003d88:	4e0c      	ldr	r6, [pc, #48]	; (8003dbc <__libc_init_array+0x38>)
 8003d8a:	4c0d      	ldr	r4, [pc, #52]	; (8003dc0 <__libc_init_array+0x3c>)
 8003d8c:	1ba4      	subs	r4, r4, r6
 8003d8e:	10a4      	asrs	r4, r4, #2
 8003d90:	42a5      	cmp	r5, r4
 8003d92:	d109      	bne.n	8003da8 <__libc_init_array+0x24>
 8003d94:	f000 f822 	bl	8003ddc <_init>
 8003d98:	2500      	movs	r5, #0
 8003d9a:	4e0a      	ldr	r6, [pc, #40]	; (8003dc4 <__libc_init_array+0x40>)
 8003d9c:	4c0a      	ldr	r4, [pc, #40]	; (8003dc8 <__libc_init_array+0x44>)
 8003d9e:	1ba4      	subs	r4, r4, r6
 8003da0:	10a4      	asrs	r4, r4, #2
 8003da2:	42a5      	cmp	r5, r4
 8003da4:	d105      	bne.n	8003db2 <__libc_init_array+0x2e>
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dac:	4798      	blx	r3
 8003dae:	3501      	adds	r5, #1
 8003db0:	e7ee      	b.n	8003d90 <__libc_init_array+0xc>
 8003db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003db6:	4798      	blx	r3
 8003db8:	3501      	adds	r5, #1
 8003dba:	e7f2      	b.n	8003da2 <__libc_init_array+0x1e>
 8003dbc:	08003e20 	.word	0x08003e20
 8003dc0:	08003e20 	.word	0x08003e20
 8003dc4:	08003e20 	.word	0x08003e20
 8003dc8:	08003e24 	.word	0x08003e24

08003dcc <memset>:
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4402      	add	r2, r0
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <memset+0xa>
 8003dd4:	4770      	bx	lr
 8003dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dda:	e7f9      	b.n	8003dd0 <memset+0x4>

08003ddc <_init>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr

08003de8 <_fini>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	bf00      	nop
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr
