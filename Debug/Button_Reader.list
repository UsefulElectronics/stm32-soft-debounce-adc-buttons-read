
Button_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f18  08002f18  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f18  08002f18  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f18  08002f18  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000001c  08002f3c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002f3c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009984  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018bf  00000000  00000000  000299c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0002b288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017193  00000000  00000000  0002c800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009024  00000000  00000000  00043993  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008910c  00000000  00000000  0004c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5ac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e28  00000000  00000000  000d5b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002edc 	.word	0x08002edc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002edc 	.word	0x08002edc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd3f 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f905 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa13 	bl	8000584 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f9f3 	bl	8000548 <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f95b 	bl	800041c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000166:	f000 f997 	bl	8000498 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t ADC_Buffer[1] = {0};										//Initialize ADC DMA buffer
 800016a:	2300      	movs	r3, #0
 800016c:	80bb      	strh	r3, [r7, #4]

  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 1);							//Start ADC sampling over DMA
 800016e:	1d3b      	adds	r3, r7, #4
 8000170:	2201      	movs	r2, #1
 8000172:	4619      	mov	r1, r3
 8000174:	4878      	ldr	r0, [pc, #480]	; (8000358 <main+0x20c>)
 8000176:	f000 fe67 	bl	8000e48 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800017a:	2100      	movs	r1, #0
 800017c:	4877      	ldr	r0, [pc, #476]	; (800035c <main+0x210>)
 800017e:	f002 fab5 	bl	80026ec <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ADC_Buffer[0] < 3900)										//it is possible that one of the buttons has been pressed
 8000182:	88bb      	ldrh	r3, [r7, #4]
 8000184:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000188:	4293      	cmp	r3, r2
 800018a:	f200 80be 	bhi.w	800030a <main+0x1be>
//			  {
//				  htim2.Instance->PSC 	= 25000;
//				  htim2.Instance->CCR1  = 1;
//			  }
//		  }
		  if((ADC_Buffer[0] <= 500) && (ADC_Buffer[0] > 1)) //third region
 800018e:	88bb      	ldrh	r3, [r7, #4]
 8000190:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000194:	d814      	bhi.n	80001c0 <main+0x74>
 8000196:	88bb      	ldrh	r3, [r7, #4]
 8000198:	2b01      	cmp	r3, #1
 800019a:	d911      	bls.n	80001c0 <main+0x74>
		  {
			  if(Button_DeBounce(ADC_Buffer))
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	4618      	mov	r0, r3
 80001a0:	f000 fa3c 	bl	800061c <Button_DeBounce>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	f000 80d5 	beq.w	8000356 <main+0x20a>
			  {
				  htim2.Instance->PSC 	= 5000;
 80001ac:	4b6b      	ldr	r3, [pc, #428]	; (800035c <main+0x210>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80001b4:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = 1;
 80001b6:	4b69      	ldr	r3, [pc, #420]	; (800035c <main+0x210>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2201      	movs	r2, #1
 80001bc:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button_DeBounce(ADC_Buffer))
 80001be:	e0ca      	b.n	8000356 <main+0x20a>
			  }
		  }
		  else if((ADC_Buffer[0] <= 1250) && (ADC_Buffer[0] > 750)) //third region
 80001c0:	88bb      	ldrh	r3, [r7, #4]
 80001c2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80001c6:	4293      	cmp	r3, r2
 80001c8:	d816      	bhi.n	80001f8 <main+0xac>
 80001ca:	88bb      	ldrh	r3, [r7, #4]
 80001cc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d911      	bls.n	80001f8 <main+0xac>
		  {
			  if(Button1_DeBounce(ADC_Buffer))
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fa56 	bl	8000688 <Button1_DeBounce>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f000 80b9 	beq.w	8000356 <main+0x20a>
			  {
				  htim2.Instance->PSC 	= 10000;
 80001e4:	4b5d      	ldr	r3, [pc, #372]	; (800035c <main+0x210>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80001ec:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = 1;
 80001ee:	4b5b      	ldr	r3, [pc, #364]	; (800035c <main+0x210>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2201      	movs	r2, #1
 80001f4:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button1_DeBounce(ADC_Buffer))
 80001f6:	e0ae      	b.n	8000356 <main+0x20a>
			  }
		  }
		  else if((ADC_Buffer[0] <= 1800) && (ADC_Buffer[0] > 1300)) //third region
 80001f8:	88bb      	ldrh	r3, [r7, #4]
 80001fa:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80001fe:	d816      	bhi.n	800022e <main+0xe2>
 8000200:	88bb      	ldrh	r3, [r7, #4]
 8000202:	f240 5214 	movw	r2, #1300	; 0x514
 8000206:	4293      	cmp	r3, r2
 8000208:	d911      	bls.n	800022e <main+0xe2>
		  {
			  if(Button2_DeBounce(ADC_Buffer))
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fa71 	bl	80006f4 <Button2_DeBounce>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	f000 809e 	beq.w	8000356 <main+0x20a>
			  {
				  htim2.Instance->PSC 	= 15000;
 800021a:	4b50      	ldr	r3, [pc, #320]	; (800035c <main+0x210>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000222:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = 1;
 8000224:	4b4d      	ldr	r3, [pc, #308]	; (800035c <main+0x210>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2201      	movs	r2, #1
 800022a:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button2_DeBounce(ADC_Buffer))
 800022c:	e093      	b.n	8000356 <main+0x20a>
			  }
		  }
		  else if((ADC_Buffer[0] <= 2300) && (ADC_Buffer[0] > 1800)) //third region
 800022e:	88bb      	ldrh	r3, [r7, #4]
 8000230:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000234:	4293      	cmp	r3, r2
 8000236:	d815      	bhi.n	8000264 <main+0x118>
 8000238:	88bb      	ldrh	r3, [r7, #4]
 800023a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800023e:	d911      	bls.n	8000264 <main+0x118>
		  {
			  if(Button3_DeBounce(ADC_Buffer))
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fa8c 	bl	8000760 <Button3_DeBounce>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	f000 8083 	beq.w	8000356 <main+0x20a>
			  {
				  htim2.Instance->PSC 	= 20000;
 8000250:	4b42      	ldr	r3, [pc, #264]	; (800035c <main+0x210>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000258:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = 1;
 800025a:	4b40      	ldr	r3, [pc, #256]	; (800035c <main+0x210>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2201      	movs	r2, #1
 8000260:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button3_DeBounce(ADC_Buffer))
 8000262:	e078      	b.n	8000356 <main+0x20a>
			  }
		  }
		  else if((ADC_Buffer[0] <= 2900) && (ADC_Buffer[0] > 2400)) //third region
 8000264:	88bb      	ldrh	r3, [r7, #4]
 8000266:	f640 3254 	movw	r2, #2900	; 0xb54
 800026a:	4293      	cmp	r3, r2
 800026c:	d814      	bhi.n	8000298 <main+0x14c>
 800026e:	88bb      	ldrh	r3, [r7, #4]
 8000270:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000274:	d910      	bls.n	8000298 <main+0x14c>
		  {
			  if(Button4_DeBounce(ADC_Buffer))
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 faa7 	bl	80007cc <Button4_DeBounce>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d068      	beq.n	8000356 <main+0x20a>
			  {
				  htim2.Instance->PSC 	= 22500;
 8000284:	4b35      	ldr	r3, [pc, #212]	; (800035c <main+0x210>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f245 72e4 	movw	r2, #22500	; 0x57e4
 800028c:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = 1;
 800028e:	4b33      	ldr	r3, [pc, #204]	; (800035c <main+0x210>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2201      	movs	r2, #1
 8000294:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button4_DeBounce(ADC_Buffer))
 8000296:	e05e      	b.n	8000356 <main+0x20a>
			  }
		  }
		  else if((ADC_Buffer[0] <= 3400) && (ADC_Buffer[0] > 3000)) //third region
 8000298:	88bb      	ldrh	r3, [r7, #4]
 800029a:	f640 5248 	movw	r2, #3400	; 0xd48
 800029e:	4293      	cmp	r3, r2
 80002a0:	d815      	bhi.n	80002ce <main+0x182>
 80002a2:	88bb      	ldrh	r3, [r7, #4]
 80002a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d910      	bls.n	80002ce <main+0x182>
		  {
			  if(Button5_DeBounce(ADC_Buffer))
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fac2 	bl	8000838 <Button5_DeBounce>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d04d      	beq.n	8000356 <main+0x20a>
			  {
				  htim2.Instance->PSC 	= 25000;
 80002ba:	4b28      	ldr	r3, [pc, #160]	; (800035c <main+0x210>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80002c2:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = 1;
 80002c4:	4b25      	ldr	r3, [pc, #148]	; (800035c <main+0x210>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2201      	movs	r2, #1
 80002ca:	635a      	str	r2, [r3, #52]	; 0x34
			  if(Button5_DeBounce(ADC_Buffer))
 80002cc:	e043      	b.n	8000356 <main+0x20a>
			  }
		  }
		  else if((ADC_Buffer[0] <= 3900) && (ADC_Buffer[0] > 3500)) //third region
 80002ce:	88bb      	ldrh	r3, [r7, #4]
 80002d0:	f640 723c 	movw	r2, #3900	; 0xf3c
 80002d4:	4293      	cmp	r3, r2
 80002d6:	f63f af54 	bhi.w	8000182 <main+0x36>
 80002da:	88bb      	ldrh	r3, [r7, #4]
 80002dc:	f640 52ac 	movw	r2, #3500	; 0xdac
 80002e0:	4293      	cmp	r3, r2
 80002e2:	f67f af4e 	bls.w	8000182 <main+0x36>
		  {
			  if(Button6_DeBounce(ADC_Buffer))
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fadb 	bl	80008a4 <Button6_DeBounce>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	f43f af46 	beq.w	8000182 <main+0x36>
			  {
				  htim2.Instance->PSC 	= 27500;
 80002f6:	4b19      	ldr	r3, [pc, #100]	; (800035c <main+0x210>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f646 326c 	movw	r2, #27500	; 0x6b6c
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28
				  htim2.Instance->CCR1  = 1;
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <main+0x210>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2201      	movs	r2, #1
 8000306:	635a      	str	r2, [r3, #52]	; 0x34
 8000308:	e73b      	b.n	8000182 <main+0x36>
			  }
		  }
	  }
	  else
	  {
		  htim2.Instance->CCR1  = 0;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <main+0x210>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2200      	movs	r2, #0
 8000310:	635a      	str	r2, [r3, #52]	; 0x34
		  Button_DeBounce(ADC_Buffer);									//Discharge software capacitors
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f981 	bl	800061c <Button_DeBounce>
		  Button1_DeBounce(ADC_Buffer);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f9b3 	bl	8000688 <Button1_DeBounce>
		  Button2_DeBounce(ADC_Buffer);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f000 f9e5 	bl	80006f4 <Button2_DeBounce>
		  Button3_DeBounce(ADC_Buffer);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fa17 	bl	8000760 <Button3_DeBounce>
		  Button4_DeBounce(ADC_Buffer);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fa49 	bl	80007cc <Button4_DeBounce>
		  Button5_DeBounce(ADC_Buffer);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fa7b 	bl	8000838 <Button5_DeBounce>
		  Button6_DeBounce(ADC_Buffer);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f000 faad 	bl	80008a4 <Button6_DeBounce>
		  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <main+0x214>)
 8000352:	f001 fcc3 	bl	8001cdc <HAL_GPIO_WritePin>
	  if(ADC_Buffer[0] < 3900)										//it is possible that one of the buttons has been pressed
 8000356:	e714      	b.n	8000182 <main+0x36>
 8000358:	20000038 	.word	0x20000038
 800035c:	200000ac 	.word	0x200000ac
 8000360:	40010c00 	.word	0x40010c00

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b094      	sub	sp, #80	; 0x50
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f002 fdaa 	bl	8002ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000394:	2301      	movs	r3, #1
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fca6 	bl	8001d0c <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003c6:	f000 faa3 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 ff10 	bl	800220c <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003f2:	f000 fa8d 	bl	8000910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003f6:	2302      	movs	r3, #2
 80003f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4618      	mov	r0, r3
 8000404:	f002 f86c 	bl	80024e0 <HAL_RCCEx_PeriphCLKConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800040e:	f000 fa7f 	bl	8000910 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3750      	adds	r7, #80	; 0x50
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_ADC1_Init+0x74>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <MX_ADC1_Init+0x78>)
 8000430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_ADC1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_ADC1_Init+0x74>)
 800043a:	2201      	movs	r2, #1
 800043c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_ADC1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_ADC1_Init+0x74>)
 8000446:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800044a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <MX_ADC1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_ADC1_Init+0x74>)
 8000454:	2201      	movs	r2, #1
 8000456:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <MX_ADC1_Init+0x74>)
 800045a:	f000 fc1d 	bl	8000c98 <HAL_ADC_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000464:	f000 fa54 	bl	8000910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000468:	2308      	movs	r3, #8
 800046a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046c:	2301      	movs	r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000470:	2307      	movs	r3, #7
 8000472:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_ADC1_Init+0x74>)
 800047a:	f000 fddf 	bl	800103c <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000484:	f000 fa44 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000038 	.word	0x20000038
 8000494:	40012400 	.word	0x40012400

08000498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800049e:	f107 0320 	add.w	r3, r7, #32
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ba:	4b22      	ldr	r3, [pc, #136]	; (8000544 <MX_TIM2_Init+0xac>)
 80004bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80004c2:	4b20      	ldr	r3, [pc, #128]	; (8000544 <MX_TIM2_Init+0xac>)
 80004c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80004c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_TIM2_Init+0xac>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <MX_TIM2_Init+0xac>)
 80004d2:	2202      	movs	r2, #2
 80004d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_TIM2_Init+0xac>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <MX_TIM2_Init+0xac>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004e2:	4818      	ldr	r0, [pc, #96]	; (8000544 <MX_TIM2_Init+0xac>)
 80004e4:	f002 f8b2 	bl	800264c <HAL_TIM_PWM_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80004ee:	f000 fa0f 	bl	8000910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	4619      	mov	r1, r3
 8000500:	4810      	ldr	r0, [pc, #64]	; (8000544 <MX_TIM2_Init+0xac>)
 8000502:	f002 fc61 	bl	8002dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800050c:	f000 fa00 	bl	8000910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000510:	2360      	movs	r3, #96	; 0x60
 8000512:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000514:	2301      	movs	r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	4619      	mov	r1, r3
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <MX_TIM2_Init+0xac>)
 8000528:	f002 f982 	bl	8002830 <HAL_TIM_PWM_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000532:	f000 f9ed 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <MX_TIM2_Init+0xac>)
 8000538:	f000 faa6 	bl	8000a88 <HAL_TIM_MspPostInit>

}
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	; 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200000ac 	.word	0x200000ac

08000548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_DMA_Init+0x38>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <MX_DMA_Init+0x38>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_DMA_Init+0x38>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	200b      	movs	r0, #11
 800056c:	f001 f837 	bl	80015de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000570:	200b      	movs	r0, #11
 8000572:	f001 f850 	bl	8001616 <HAL_NVIC_EnableIRQ>

}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <MX_GPIO_Init+0x90>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <MX_GPIO_Init+0x90>)
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_GPIO_Init+0x90>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0320 	and.w	r3, r3, #32
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_GPIO_Init+0x90>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MX_GPIO_Init+0x90>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_GPIO_Init+0x90>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0308 	and.w	r3, r3, #8
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_GPIO_Init+0x90>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a11      	ldr	r2, [pc, #68]	; (8000614 <MX_GPIO_Init+0x90>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_GPIO_Init+0x90>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80005e6:	480c      	ldr	r0, [pc, #48]	; (8000618 <MX_GPIO_Init+0x94>)
 80005e8:	f001 fb78 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 80005ec:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80005f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_GPIO_Init+0x94>)
 8000606:	f001 fa0f 	bl	8001a28 <HAL_GPIO_Init>

}
 800060a:	bf00      	nop
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	40010c00 	.word	0x40010c00

0800061c <Button_DeBounce>:

/* USER CODE BEGIN 4 */

uint8_t Button_DeBounce(uint16_t* ADC_Buffer)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;			//Software capacitor charged level
	if(ADC_Buffer[0] < 3900)						//The level is set to be static so the last level value is not gone after executing this function
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000630:	4293      	cmp	r3, r2
 8000632:	d806      	bhi.n	8000642 <Button_DeBounce+0x26>
	{
		++Level;									//Increment Software capacitor charged level
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <Button_DeBounce+0x68>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	b29a      	uxth	r2, r3
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <Button_DeBounce+0x68>)
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	e00e      	b.n	8000660 <Button_DeBounce+0x44>
	}
	else
	{												//entered when no button is pressed
		--Level;									//Decrement Software capacitor charged level
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <Button_DeBounce+0x68>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <Button_DeBounce+0x68>)
 800064c:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)					//keep the lowest level at Restart_Level. this will also prevent overflow
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <Button_DeBounce+0x68>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000656:	d803      	bhi.n	8000660 <Button_DeBounce+0x44>
		{
			Level = Restart_Level;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <Button_DeBounce+0x68>)
 800065a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800065e:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)					//limit the Software capacitor charged level at Acceptance_Level when a button is held pressed
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <Button_DeBounce+0x68>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000668:	4293      	cmp	r3, r2
 800066a:	d905      	bls.n	8000678 <Button_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <Button_DeBounce+0x68>)
 800066e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000672:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;								//Enable taking action wherever this function is called
 8000674:	2301      	movs	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	20000000 	.word	0x20000000

08000688 <Button1_DeBounce>:

uint8_t Button1_DeBounce(uint16_t* ADC_Buffer)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f640 723b 	movw	r2, #3899	; 0xf3b
 800069c:	4293      	cmp	r3, r2
 800069e:	d806      	bhi.n	80006ae <Button1_DeBounce+0x26>
	{
		++Level;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <Button1_DeBounce+0x68>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <Button1_DeBounce+0x68>)
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	e00e      	b.n	80006cc <Button1_DeBounce+0x44>
	}
	else
	{
		--Level;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <Button1_DeBounce+0x68>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <Button1_DeBounce+0x68>)
 80006b8:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <Button1_DeBounce+0x68>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006c2:	d803      	bhi.n	80006cc <Button1_DeBounce+0x44>
		{
			Level = Restart_Level;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <Button1_DeBounce+0x68>)
 80006c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ca:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <Button1_DeBounce+0x68>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d905      	bls.n	80006e4 <Button1_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <Button1_DeBounce+0x68>)
 80006da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006de:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000002 	.word	0x20000002

080006f4 <Button2_DeBounce>:

uint8_t Button2_DeBounce(uint16_t* ADC_Buffer)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000708:	4293      	cmp	r3, r2
 800070a:	d806      	bhi.n	800071a <Button2_DeBounce+0x26>
	{
		++Level;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <Button2_DeBounce+0x68>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <Button2_DeBounce+0x68>)
 8000716:	801a      	strh	r2, [r3, #0]
 8000718:	e00e      	b.n	8000738 <Button2_DeBounce+0x44>
	}
	else
	{
		--Level;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <Button2_DeBounce+0x68>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <Button2_DeBounce+0x68>)
 8000724:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <Button2_DeBounce+0x68>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800072e:	d803      	bhi.n	8000738 <Button2_DeBounce+0x44>
		{
			Level = Restart_Level;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <Button2_DeBounce+0x68>)
 8000732:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000736:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <Button2_DeBounce+0x68>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000740:	4293      	cmp	r3, r2
 8000742:	d905      	bls.n	8000750 <Button2_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <Button2_DeBounce+0x68>)
 8000746:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800074a:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 800074c:	2301      	movs	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	20000004 	.word	0x20000004

08000760 <Button3_DeBounce>:
uint8_t Button3_DeBounce(uint16_t* ADC_Buffer)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000774:	4293      	cmp	r3, r2
 8000776:	d806      	bhi.n	8000786 <Button3_DeBounce+0x26>
	{
		++Level;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <Button3_DeBounce+0x68>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <Button3_DeBounce+0x68>)
 8000782:	801a      	strh	r2, [r3, #0]
 8000784:	e00e      	b.n	80007a4 <Button3_DeBounce+0x44>
	}
	else
	{
		--Level;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <Button3_DeBounce+0x68>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	3b01      	subs	r3, #1
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <Button3_DeBounce+0x68>)
 8000790:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <Button3_DeBounce+0x68>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800079a:	d803      	bhi.n	80007a4 <Button3_DeBounce+0x44>
		{
			Level = Restart_Level;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <Button3_DeBounce+0x68>)
 800079e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a2:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <Button3_DeBounce+0x68>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d905      	bls.n	80007bc <Button3_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <Button3_DeBounce+0x68>)
 80007b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80007b6:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000006 	.word	0x20000006

080007cc <Button4_DeBounce>:
uint8_t Button4_DeBounce(uint16_t* ADC_Buffer)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	f640 723b 	movw	r2, #3899	; 0xf3b
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d806      	bhi.n	80007f2 <Button4_DeBounce+0x26>
	{
		++Level;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <Button4_DeBounce+0x68>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <Button4_DeBounce+0x68>)
 80007ee:	801a      	strh	r2, [r3, #0]
 80007f0:	e00e      	b.n	8000810 <Button4_DeBounce+0x44>
	}
	else
	{
		--Level;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <Button4_DeBounce+0x68>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <Button4_DeBounce+0x68>)
 80007fc:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <Button4_DeBounce+0x68>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000806:	d803      	bhi.n	8000810 <Button4_DeBounce+0x44>
		{
			Level = Restart_Level;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <Button4_DeBounce+0x68>)
 800080a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800080e:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <Button4_DeBounce+0x68>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000818:	4293      	cmp	r3, r2
 800081a:	d905      	bls.n	8000828 <Button4_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <Button4_DeBounce+0x68>)
 800081e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000822:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000828:	7bfb      	ldrb	r3, [r7, #15]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	20000008 	.word	0x20000008

08000838 <Button5_DeBounce>:
uint8_t Button5_DeBounce(uint16_t* ADC_Buffer)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	f640 723b 	movw	r2, #3899	; 0xf3b
 800084c:	4293      	cmp	r3, r2
 800084e:	d806      	bhi.n	800085e <Button5_DeBounce+0x26>
	{
		++Level;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <Button5_DeBounce+0x68>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	b29a      	uxth	r2, r3
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <Button5_DeBounce+0x68>)
 800085a:	801a      	strh	r2, [r3, #0]
 800085c:	e00e      	b.n	800087c <Button5_DeBounce+0x44>
	}
	else
	{
		--Level;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <Button5_DeBounce+0x68>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	3b01      	subs	r3, #1
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <Button5_DeBounce+0x68>)
 8000868:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <Button5_DeBounce+0x68>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000872:	d803      	bhi.n	800087c <Button5_DeBounce+0x44>
		{
			Level = Restart_Level;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <Button5_DeBounce+0x68>)
 8000876:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800087a:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <Button5_DeBounce+0x68>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000884:	4293      	cmp	r3, r2
 8000886:	d905      	bls.n	8000894 <Button5_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <Button5_DeBounce+0x68>)
 800088a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800088e:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000890:	2301      	movs	r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	2000000a 	.word	0x2000000a

080008a4 <Button6_DeBounce>:
uint8_t Button6_DeBounce(uint16_t* ADC_Buffer)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint8_t 		ret = DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
	static uint16_t	Level = Restart_Level;
	if(ADC_Buffer[0] < 3900)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	f640 723b 	movw	r2, #3899	; 0xf3b
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d806      	bhi.n	80008ca <Button6_DeBounce+0x26>
	{
		++Level;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <Button6_DeBounce+0x68>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <Button6_DeBounce+0x68>)
 80008c6:	801a      	strh	r2, [r3, #0]
 80008c8:	e00e      	b.n	80008e8 <Button6_DeBounce+0x44>
	}
	else
	{
		--Level;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <Button6_DeBounce+0x68>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <Button6_DeBounce+0x68>)
 80008d4:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <Button6_DeBounce+0x68>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008de:	d803      	bhi.n	80008e8 <Button6_DeBounce+0x44>
		{
			Level = Restart_Level;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <Button6_DeBounce+0x68>)
 80008e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008e6:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= Acceptance_Level)
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <Button6_DeBounce+0x68>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d905      	bls.n	8000900 <Button6_DeBounce+0x5c>
	{
		Level = Acceptance_Level;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <Button6_DeBounce+0x68>)
 80008f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008fa:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000900:	7bfb      	ldrb	r3, [r7, #15]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	2000000c 	.word	0x2000000c

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_MspInit+0x5c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a14      	ldr	r2, [pc, #80]	; (8000978 <HAL_MspInit+0x5c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_MspInit+0x5c>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_MspInit+0x5c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x5c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_MspInit+0x60>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_MspInit+0x60>)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	40010000 	.word	0x40010000

08000980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <HAL_ADC_MspInit+0xbc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d149      	bne.n	8000a34 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d4:	2303      	movs	r3, #3
 80009d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4819      	ldr	r0, [pc, #100]	; (8000a44 <HAL_ADC_MspInit+0xc4>)
 80009e0:	f001 f822 	bl	8001a28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 80009e6:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_ADC_MspInit+0xcc>)
 80009e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 80009fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 8000a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 8000a0e:	2220      	movs	r2, #32
 8000a10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 8000a1a:	f000 fe17 	bl	800164c <HAL_DMA_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000a24:	f7ff ff74 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 8000a2c:	621a      	str	r2, [r3, #32]
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_ADC_MspInit+0xc8>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40012400 	.word	0x40012400
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	20000068 	.word	0x20000068
 8000a4c:	40020008 	.word	0x40020008

08000a50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a60:	d10b      	bne.n	8000a7a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_TIM_PWM_MspInit+0x34>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_TIM_PWM_MspInit+0x34>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_TIM_PWM_MspInit+0x34>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa6:	d12a      	bne.n	8000afe <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_TIM_MspPostInit+0x80>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <HAL_TIM_MspPostInit+0x80>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_TIM_MspPostInit+0x80>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ac4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <HAL_TIM_MspPostInit+0x84>)
 8000ad6:	f000 ffa7 	bl	8001a28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_TIM_MspPostInit+0x88>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <HAL_TIM_MspPostInit+0x88>)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010000 	.word	0x40010000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <HardFault_Handler+0x4>

08000b26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <BusFault_Handler+0x4>

08000b32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <UsageFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f87e 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <DMA1_Channel1_IRQHandler+0x10>)
 8000b6e:	f000 fe27 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000068 	.word	0x20000068

08000b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bae:	f7ff ffe5 	bl	8000b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 f967 	bl	8002e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff fac9 	bl	800014c <main>
  bx lr
 8000bba:	4770      	bx	lr
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000bc4:	08002f20 	.word	0x08002f20
  ldr r2, =_sbss
 8000bc8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000bcc:	200000f8 	.word	0x200000f8

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x28>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x28>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 fcef 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fe94 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fd07 	bl	8001632 <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 fccf 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000010 	.word	0x20000010
 8000c58:	20000018 	.word	0x20000018
 8000c5c:	20000014 	.word	0x20000014

08000c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x1c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x20>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <HAL_IncTick+0x20>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	20000018 	.word	0x20000018
 8000c80:	200000f4 	.word	0x200000f4

08000c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <HAL_GetTick+0x10>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	200000f4 	.word	0x200000f4

08000c98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e0be      	b.n	8000e38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fe52 	bl	8000980 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 faff 	bl	80012e0 <ADC_ConversionStop_Disable>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 8099 	bne.w	8000e26 <HAL_ADC_Init+0x18e>
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8095 	bne.w	8000e26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d04:	f023 0302 	bic.w	r3, r3, #2
 8000d08:	f043 0202 	orr.w	r2, r3, #2
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7b1b      	ldrb	r3, [r3, #12]
 8000d1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d30:	d003      	beq.n	8000d3a <HAL_ADC_Init+0xa2>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d102      	bne.n	8000d40 <HAL_ADC_Init+0xa8>
 8000d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3e:	e000      	b.n	8000d42 <HAL_ADC_Init+0xaa>
 8000d40:	2300      	movs	r3, #0
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7d1b      	ldrb	r3, [r3, #20]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d119      	bne.n	8000d84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7b1b      	ldrb	r3, [r3, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d109      	bne.n	8000d6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	035a      	lsls	r2, r3, #13
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	e00b      	b.n	8000d84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f043 0220 	orr.w	r2, r3, #32
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	f043 0201 	orr.w	r2, r3, #1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <HAL_ADC_Init+0x1a8>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db4:	d003      	beq.n	8000dbe <HAL_ADC_Init+0x126>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d104      	bne.n	8000dc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	051b      	lsls	r3, r3, #20
 8000dc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_ADC_Init+0x1ac>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d10b      	bne.n	8000e04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df6:	f023 0303 	bic.w	r3, r3, #3
 8000dfa:	f043 0201 	orr.w	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e02:	e018      	b.n	8000e36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	f023 0312 	bic.w	r3, r3, #18
 8000e0c:	f043 0210 	orr.w	r2, r3, #16
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e18:	f043 0201 	orr.w	r2, r3, #1
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e24:	e007      	b.n	8000e36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	f043 0210 	orr.w	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	ffe1f7fd 	.word	0xffe1f7fd
 8000e44:	ff1f0efe 	.word	0xff1f0efe

08000e48 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a64      	ldr	r2, [pc, #400]	; (8000ff0 <HAL_ADC_Start_DMA+0x1a8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d004      	beq.n	8000e6c <HAL_ADC_Start_DMA+0x24>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a63      	ldr	r2, [pc, #396]	; (8000ff4 <HAL_ADC_Start_DMA+0x1ac>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d106      	bne.n	8000e7a <HAL_ADC_Start_DMA+0x32>
 8000e6c:	4b60      	ldr	r3, [pc, #384]	; (8000ff0 <HAL_ADC_Start_DMA+0x1a8>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f040 80b3 	bne.w	8000fe0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <HAL_ADC_Start_DMA+0x40>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e0ae      	b.n	8000fe6 <HAL_ADC_Start_DMA+0x19e>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 f9cb 	bl	800122c <ADC_Enable>
 8000e96:	4603      	mov	r3, r0
 8000e98:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f040 809a 	bne.w	8000fd6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <HAL_ADC_Start_DMA+0x1ac>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d105      	bne.n	8000ecc <HAL_ADC_Start_DMA+0x84>
 8000ec0:	4b4b      	ldr	r3, [pc, #300]	; (8000ff0 <HAL_ADC_Start_DMA+0x1a8>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d115      	bne.n	8000ef8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d026      	beq.n	8000f34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ef6:	e01d      	b.n	8000f34 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <HAL_ADC_Start_DMA+0x1a8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d004      	beq.n	8000f18 <HAL_ADC_Start_DMA+0xd0>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a38      	ldr	r2, [pc, #224]	; (8000ff4 <HAL_ADC_Start_DMA+0x1ac>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d10d      	bne.n	8000f34 <HAL_ADC_Start_DMA+0xec>
 8000f18:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <HAL_ADC_Start_DMA+0x1a8>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d007      	beq.n	8000f34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	f023 0206 	bic.w	r2, r3, #6
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f4c:	e002      	b.n	8000f54 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2200      	movs	r2, #0
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4a25      	ldr	r2, [pc, #148]	; (8000ff8 <HAL_ADC_Start_DMA+0x1b0>)
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <HAL_ADC_Start_DMA+0x1b4>)
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a23      	ldr	r2, [pc, #140]	; (8001000 <HAL_ADC_Start_DMA+0x1b8>)
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f06f 0202 	mvn.w	r2, #2
 8000f7c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f8c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a18      	ldr	r0, [r3, #32]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	334c      	adds	r3, #76	; 0x4c
 8000f98:	4619      	mov	r1, r3
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f000 fbaf 	bl	8001700 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fb0:	d108      	bne.n	8000fc4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fc0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fc2:	e00f      	b.n	8000fe4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fd2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fd4:	e006      	b.n	8000fe4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000fde:	e001      	b.n	8000fe4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40012400 	.word	0x40012400
 8000ff4:	40012800 	.word	0x40012800
 8000ff8:	08001363 	.word	0x08001363
 8000ffc:	080013df 	.word	0x080013df
 8001000:	080013fb 	.word	0x080013fb

08001004 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_ADC_ConfigChannel+0x20>
 8001058:	2302      	movs	r3, #2
 800105a:	e0dc      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1da>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b06      	cmp	r3, #6
 800106a:	d81c      	bhi.n	80010a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	3b05      	subs	r3, #5
 800107e:	221f      	movs	r2, #31
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	4019      	ands	r1, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	3b05      	subs	r3, #5
 8001098:	fa00 f203 	lsl.w	r2, r0, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
 80010a4:	e03c      	b.n	8001120 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d81c      	bhi.n	80010e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b23      	subs	r3, #35	; 0x23
 80010c0:	221f      	movs	r2, #31
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4019      	ands	r1, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b23      	subs	r3, #35	; 0x23
 80010da:	fa00 f203 	lsl.w	r2, r0, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
 80010e6:	e01b      	b.n	8001120 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	3b41      	subs	r3, #65	; 0x41
 80010fa:	221f      	movs	r2, #31
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4019      	ands	r1, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3b41      	subs	r3, #65	; 0x41
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b09      	cmp	r3, #9
 8001126:	d91c      	bls.n	8001162 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68d9      	ldr	r1, [r3, #12]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	3b1e      	subs	r3, #30
 800113a:	2207      	movs	r2, #7
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	4019      	ands	r1, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6898      	ldr	r0, [r3, #8]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	3b1e      	subs	r3, #30
 8001154:	fa00 f203 	lsl.w	r2, r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	e019      	b.n	8001196 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6919      	ldr	r1, [r3, #16]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6898      	ldr	r0, [r3, #8]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b10      	cmp	r3, #16
 800119c:	d003      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a2:	2b11      	cmp	r3, #17
 80011a4:	d132      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_ADC_ConfigChannel+0x1e4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d125      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d126      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d11a      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_ADC_ConfigChannel+0x1e8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_ADC_ConfigChannel+0x1ec>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	0c9a      	lsrs	r2, r3, #18
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ec:	e002      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f9      	bne.n	80011ee <HAL_ADC_ConfigChannel+0x1b2>
 80011fa:	e007      	b.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f043 0220 	orr.w	r2, r3, #32
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40012400 	.word	0x40012400
 8001224:	20000010 	.word	0x20000010
 8001228:	431bde83 	.word	0x431bde83

0800122c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d040      	beq.n	80012cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0201 	orr.w	r2, r2, #1
 8001258:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <ADC_Enable+0xac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <ADC_Enable+0xb0>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	0c9b      	lsrs	r3, r3, #18
 8001266:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001268:	e002      	b.n	8001270 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	3b01      	subs	r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f9      	bne.n	800126a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001276:	f7ff fd05 	bl	8000c84 <HAL_GetTick>
 800127a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800127c:	e01f      	b.n	80012be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800127e:	f7ff fd01 	bl	8000c84 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d918      	bls.n	80012be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d011      	beq.n	80012be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e007      	b.n	80012ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d1d8      	bne.n	800127e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000010 	.word	0x20000010
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d12e      	bne.n	8001358 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0201 	bic.w	r2, r2, #1
 8001308:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800130a:	f7ff fcbb 	bl	8000c84 <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001310:	e01b      	b.n	800134a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001312:	f7ff fcb7 	bl	8000c84 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d914      	bls.n	800134a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d10d      	bne.n	800134a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e007      	b.n	800135a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b01      	cmp	r3, #1
 8001356:	d0dc      	beq.n	8001312 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001378:	2b00      	cmp	r3, #0
 800137a:	d127      	bne.n	80013cc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001392:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001396:	d115      	bne.n	80013c4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800139c:	2b00      	cmp	r3, #0
 800139e:	d111      	bne.n	80013c4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d105      	bne.n	80013c4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff fe1d 	bl	8001004 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013ca:	e004      	b.n	80013d6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7ff fe12 	bl	8001016 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	f043 0204 	orr.w	r2, r3, #4
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff fe01 	bl	8001028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4906      	ldr	r1, [pc, #24]	; (80014c8 <__NVIC_EnableIRQ+0x34>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff90 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff2d 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff42 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff90 	bl	8001520 <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5f 	bl	80014cc <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff35 	bl	8001494 <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e043      	b.n	80016ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_DMA_Init+0xa8>)
 800166a:	4413      	add	r3, r2
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <HAL_DMA_Init+0xac>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	009a      	lsls	r2, r3, #2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_DMA_Init+0xb0>)
 800167e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001696:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800169a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	bffdfff8 	.word	0xbffdfff8
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	40020000 	.word	0x40020000

08001700 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_DMA_Start_IT+0x20>
 800171c:	2302      	movs	r3, #2
 800171e:	e04a      	b.n	80017b6 <HAL_DMA_Start_IT+0xb6>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172e:	2b01      	cmp	r3, #1
 8001730:	d13a      	bne.n	80017a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f938 	bl	80019cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 020e 	orr.w	r2, r2, #14
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e00f      	b.n	8001796 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0204 	bic.w	r2, r2, #4
 8001784:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 020a 	orr.w	r2, r2, #10
 8001794:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e005      	b.n	80017b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2204      	movs	r2, #4
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d04f      	beq.n	8001888 <HAL_DMA_IRQHandler+0xc8>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d04a      	beq.n	8001888 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d107      	bne.n	8001810 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0204 	bic.w	r2, r2, #4
 800180e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a66      	ldr	r2, [pc, #408]	; (80019b0 <HAL_DMA_IRQHandler+0x1f0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d029      	beq.n	800186e <HAL_DMA_IRQHandler+0xae>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a65      	ldr	r2, [pc, #404]	; (80019b4 <HAL_DMA_IRQHandler+0x1f4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d022      	beq.n	800186a <HAL_DMA_IRQHandler+0xaa>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a63      	ldr	r2, [pc, #396]	; (80019b8 <HAL_DMA_IRQHandler+0x1f8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01a      	beq.n	8001864 <HAL_DMA_IRQHandler+0xa4>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a62      	ldr	r2, [pc, #392]	; (80019bc <HAL_DMA_IRQHandler+0x1fc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d012      	beq.n	800185e <HAL_DMA_IRQHandler+0x9e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a60      	ldr	r2, [pc, #384]	; (80019c0 <HAL_DMA_IRQHandler+0x200>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00a      	beq.n	8001858 <HAL_DMA_IRQHandler+0x98>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a5f      	ldr	r2, [pc, #380]	; (80019c4 <HAL_DMA_IRQHandler+0x204>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d102      	bne.n	8001852 <HAL_DMA_IRQHandler+0x92>
 800184c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001850:	e00e      	b.n	8001870 <HAL_DMA_IRQHandler+0xb0>
 8001852:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001856:	e00b      	b.n	8001870 <HAL_DMA_IRQHandler+0xb0>
 8001858:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800185c:	e008      	b.n	8001870 <HAL_DMA_IRQHandler+0xb0>
 800185e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001862:	e005      	b.n	8001870 <HAL_DMA_IRQHandler+0xb0>
 8001864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001868:	e002      	b.n	8001870 <HAL_DMA_IRQHandler+0xb0>
 800186a:	2340      	movs	r3, #64	; 0x40
 800186c:	e000      	b.n	8001870 <HAL_DMA_IRQHandler+0xb0>
 800186e:	2304      	movs	r3, #4
 8001870:	4a55      	ldr	r2, [pc, #340]	; (80019c8 <HAL_DMA_IRQHandler+0x208>)
 8001872:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8094 	beq.w	80019a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001886:	e08e      	b.n	80019a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	2202      	movs	r2, #2
 800188e:	409a      	lsls	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d056      	beq.n	8001946 <HAL_DMA_IRQHandler+0x186>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d051      	beq.n	8001946 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10b      	bne.n	80018c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 020a 	bic.w	r2, r2, #10
 80018be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a38      	ldr	r2, [pc, #224]	; (80019b0 <HAL_DMA_IRQHandler+0x1f0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d029      	beq.n	8001926 <HAL_DMA_IRQHandler+0x166>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <HAL_DMA_IRQHandler+0x1f4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d022      	beq.n	8001922 <HAL_DMA_IRQHandler+0x162>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <HAL_DMA_IRQHandler+0x1f8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01a      	beq.n	800191c <HAL_DMA_IRQHandler+0x15c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a34      	ldr	r2, [pc, #208]	; (80019bc <HAL_DMA_IRQHandler+0x1fc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d012      	beq.n	8001916 <HAL_DMA_IRQHandler+0x156>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <HAL_DMA_IRQHandler+0x200>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00a      	beq.n	8001910 <HAL_DMA_IRQHandler+0x150>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <HAL_DMA_IRQHandler+0x204>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d102      	bne.n	800190a <HAL_DMA_IRQHandler+0x14a>
 8001904:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001908:	e00e      	b.n	8001928 <HAL_DMA_IRQHandler+0x168>
 800190a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190e:	e00b      	b.n	8001928 <HAL_DMA_IRQHandler+0x168>
 8001910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001914:	e008      	b.n	8001928 <HAL_DMA_IRQHandler+0x168>
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	e005      	b.n	8001928 <HAL_DMA_IRQHandler+0x168>
 800191c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001920:	e002      	b.n	8001928 <HAL_DMA_IRQHandler+0x168>
 8001922:	2320      	movs	r3, #32
 8001924:	e000      	b.n	8001928 <HAL_DMA_IRQHandler+0x168>
 8001926:	2302      	movs	r3, #2
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_DMA_IRQHandler+0x208>)
 800192a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d034      	beq.n	80019a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001944:	e02f      	b.n	80019a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	2208      	movs	r2, #8
 800194c:	409a      	lsls	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d028      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x1e8>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d023      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 020e 	bic.w	r2, r2, #14
 800196e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
    }
  }
  return;
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
}
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40020008 	.word	0x40020008
 80019b4:	4002001c 	.word	0x4002001c
 80019b8:	40020030 	.word	0x40020030
 80019bc:	40020044 	.word	0x40020044
 80019c0:	40020058 	.word	0x40020058
 80019c4:	4002006c 	.word	0x4002006c
 80019c8:	40020000 	.word	0x40020000

080019cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d108      	bne.n	8001a0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a0a:	e007      	b.n	8001a1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	60da      	str	r2, [r3, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b08b      	sub	sp, #44	; 0x2c
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3a:	e127      	b.n	8001c8c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 8116 	bne.w	8001c86 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b12      	cmp	r3, #18
 8001a60:	d034      	beq.n	8001acc <HAL_GPIO_Init+0xa4>
 8001a62:	2b12      	cmp	r3, #18
 8001a64:	d80d      	bhi.n	8001a82 <HAL_GPIO_Init+0x5a>
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d02b      	beq.n	8001ac2 <HAL_GPIO_Init+0x9a>
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d804      	bhi.n	8001a78 <HAL_GPIO_Init+0x50>
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d031      	beq.n	8001ad6 <HAL_GPIO_Init+0xae>
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d01c      	beq.n	8001ab0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a76:	e048      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d043      	beq.n	8001b04 <HAL_GPIO_Init+0xdc>
 8001a7c:	2b11      	cmp	r3, #17
 8001a7e:	d01b      	beq.n	8001ab8 <HAL_GPIO_Init+0x90>
          break;
 8001a80:	e043      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a82:	4a89      	ldr	r2, [pc, #548]	; (8001ca8 <HAL_GPIO_Init+0x280>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d026      	beq.n	8001ad6 <HAL_GPIO_Init+0xae>
 8001a88:	4a87      	ldr	r2, [pc, #540]	; (8001ca8 <HAL_GPIO_Init+0x280>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d806      	bhi.n	8001a9c <HAL_GPIO_Init+0x74>
 8001a8e:	4a87      	ldr	r2, [pc, #540]	; (8001cac <HAL_GPIO_Init+0x284>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d020      	beq.n	8001ad6 <HAL_GPIO_Init+0xae>
 8001a94:	4a86      	ldr	r2, [pc, #536]	; (8001cb0 <HAL_GPIO_Init+0x288>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01d      	beq.n	8001ad6 <HAL_GPIO_Init+0xae>
          break;
 8001a9a:	e036      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a9c:	4a85      	ldr	r2, [pc, #532]	; (8001cb4 <HAL_GPIO_Init+0x28c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0xae>
 8001aa2:	4a85      	ldr	r2, [pc, #532]	; (8001cb8 <HAL_GPIO_Init+0x290>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d016      	beq.n	8001ad6 <HAL_GPIO_Init+0xae>
 8001aa8:	4a84      	ldr	r2, [pc, #528]	; (8001cbc <HAL_GPIO_Init+0x294>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0xae>
          break;
 8001aae:	e02c      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	623b      	str	r3, [r7, #32]
          break;
 8001ab6:	e028      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	3304      	adds	r3, #4
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e023      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e01e      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	330c      	adds	r3, #12
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e019      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e012      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aec:	2308      	movs	r3, #8
 8001aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	611a      	str	r2, [r3, #16]
          break;
 8001af6:	e008      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af8:	2308      	movs	r3, #8
 8001afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	615a      	str	r2, [r3, #20]
          break;
 8001b02:	e002      	b.n	8001b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2bff      	cmp	r3, #255	; 0xff
 8001b0e:	d801      	bhi.n	8001b14 <HAL_GPIO_Init+0xec>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	e001      	b.n	8001b18 <HAL_GPIO_Init+0xf0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2bff      	cmp	r3, #255	; 0xff
 8001b1e:	d802      	bhi.n	8001b26 <HAL_GPIO_Init+0xfe>
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x104>
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	3b08      	subs	r3, #8
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	210f      	movs	r1, #15
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	6a39      	ldr	r1, [r7, #32]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8096 	beq.w	8001c86 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b5a:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_GPIO_Init+0x298>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_GPIO_Init+0x298>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6193      	str	r3, [r2, #24]
 8001b66:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <HAL_GPIO_Init+0x298>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b72:	4a54      	ldr	r2, [pc, #336]	; (8001cc4 <HAL_GPIO_Init+0x29c>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_GPIO_Init+0x2a0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x19e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	; (8001ccc <HAL_GPIO_Init+0x2a4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x19a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <HAL_GPIO_Init+0x2a8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x196>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_GPIO_Init+0x2ac>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x192>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x1a0>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x1a0>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x1a0>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x1a0>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bd8:	493a      	ldr	r1, [pc, #232]	; (8001cc4 <HAL_GPIO_Init+0x29c>)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4938      	ldr	r1, [pc, #224]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
 8001bfe:	e006      	b.n	8001c0e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c00:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4933      	ldr	r1, [pc, #204]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	492e      	ldr	r1, [pc, #184]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
 8001c26:	e006      	b.n	8001c36 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4929      	ldr	r1, [pc, #164]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	4924      	ldr	r1, [pc, #144]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
 8001c4e:	e006      	b.n	8001c5e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	491f      	ldr	r1, [pc, #124]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	491a      	ldr	r1, [pc, #104]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60cb      	str	r3, [r1, #12]
 8001c76:	e006      	b.n	8001c86 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4915      	ldr	r1, [pc, #84]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	3301      	adds	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f aed0 	bne.w	8001a3c <HAL_GPIO_Init+0x14>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	372c      	adds	r7, #44	; 0x2c
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	10210000 	.word	0x10210000
 8001cac:	10110000 	.word	0x10110000
 8001cb0:	10120000 	.word	0x10120000
 8001cb4:	10310000 	.word	0x10310000
 8001cb8:	10320000 	.word	0x10320000
 8001cbc:	10220000 	.word	0x10220000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	40010c00 	.word	0x40010c00
 8001cd0:	40011000 	.word	0x40011000
 8001cd4:	40011400 	.word	0x40011400
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	611a      	str	r2, [r3, #16]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e26c      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8087 	beq.w	8001e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d2c:	4b92      	ldr	r3, [pc, #584]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d00c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d38:	4b8f      	ldr	r3, [pc, #572]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d112      	bne.n	8001d6a <HAL_RCC_OscConfig+0x5e>
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d10b      	bne.n	8001d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d52:	4b89      	ldr	r3, [pc, #548]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d06c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x12c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d168      	bne.n	8001e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e246      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x76>
 8001d74:	4b80      	ldr	r3, [pc, #512]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a7f      	ldr	r2, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e02e      	b.n	8001de0 <HAL_RCC_OscConfig+0xd4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x98>
 8001d8a:	4b7b      	ldr	r3, [pc, #492]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7a      	ldr	r2, [pc, #488]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a77      	ldr	r2, [pc, #476]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e01d      	b.n	8001de0 <HAL_RCC_OscConfig+0xd4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xbc>
 8001dae:	4b72      	ldr	r3, [pc, #456]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a71      	ldr	r2, [pc, #452]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0xd4>
 8001dc8:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a6a      	ldr	r2, [pc, #424]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7fe ff4c 	bl	8000c84 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7fe ff48 	bl	8000c84 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1fa      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0xe4>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe ff38 	bl	8000c84 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7fe ff34 	bl	8000c84 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1e6      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x10c>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d063      	beq.n	8001f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e46:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e52:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d11c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x18c>
 8001e5e:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d116      	bne.n	8001e98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_RCC_OscConfig+0x176>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e1ba      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4939      	ldr	r1, [pc, #228]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	e03a      	b.n	8001f0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe feed 	bl	8000c84 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eae:	f7fe fee9 	bl	8000c84 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e19b      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4927      	ldr	r1, [pc, #156]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
 8001ee0:	e015      	b.n	8001f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fecc 	bl	8000c84 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef0:	f7fe fec8 	bl	8000c84 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e17a      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d03a      	beq.n	8001f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d019      	beq.n	8001f56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7fe feac 	bl	8000c84 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f30:	f7fe fea8 	bl	8000c84 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e15a      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f000 faa8 	bl	80024a4 <RCC_Delay>
 8001f54:	e01c      	b.n	8001f90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fe92 	bl	8000c84 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f62:	e00f      	b.n	8001f84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f64:	f7fe fe8e 	bl	8000c84 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d908      	bls.n	8001f84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e140      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	42420000 	.word	0x42420000
 8001f80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	4b9e      	ldr	r3, [pc, #632]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e9      	bne.n	8001f64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a6 	beq.w	80020ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b97      	ldr	r3, [pc, #604]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10d      	bne.n	8001fca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b94      	ldr	r3, [pc, #592]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a93      	ldr	r2, [pc, #588]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b91      	ldr	r3, [pc, #580]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <HAL_RCC_OscConfig+0x4f8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d118      	bne.n	8002008 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd6:	4b8b      	ldr	r3, [pc, #556]	; (8002204 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a8a      	ldr	r2, [pc, #552]	; (8002204 <HAL_RCC_OscConfig+0x4f8>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe fe4f 	bl	8000c84 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fea:	f7fe fe4b 	bl	8000c84 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b64      	cmp	r3, #100	; 0x64
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0fd      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	4b81      	ldr	r3, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x312>
 8002010:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a7a      	ldr	r2, [pc, #488]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	e02d      	b.n	800207a <HAL_RCC_OscConfig+0x36e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x334>
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a75      	ldr	r2, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4b73      	ldr	r3, [pc, #460]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a72      	ldr	r2, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	e01c      	b.n	800207a <HAL_RCC_OscConfig+0x36e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d10c      	bne.n	8002062 <HAL_RCC_OscConfig+0x356>
 8002048:	4b6d      	ldr	r3, [pc, #436]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a6c      	ldr	r2, [pc, #432]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a69      	ldr	r2, [pc, #420]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x36e>
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a66      	ldr	r2, [pc, #408]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b64      	ldr	r3, [pc, #400]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a63      	ldr	r2, [pc, #396]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d015      	beq.n	80020ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe fdff 	bl	8000c84 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fdfb 	bl	8000c84 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0ab      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	4b57      	ldr	r3, [pc, #348]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ee      	beq.n	800208a <HAL_RCC_OscConfig+0x37e>
 80020ac:	e014      	b.n	80020d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fde9 	bl	8000c84 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe fde5 	bl	8000c84 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e095      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020cc:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ee      	bne.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4b48      	ldr	r3, [pc, #288]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a47      	ldr	r2, [pc, #284]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8081 	beq.w	80021f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f4:	4b42      	ldr	r3, [pc, #264]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d061      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d146      	bne.n	8002196 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <HAL_RCC_OscConfig+0x4fc>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fdb9 	bl	8000c84 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7fe fdb5 	bl	8000c84 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e067      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d108      	bne.n	8002150 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	492d      	ldr	r1, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a19      	ldr	r1, [r3, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	430b      	orrs	r3, r1
 8002162:	4927      	ldr	r1, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_RCC_OscConfig+0x4fc>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7fe fd89 	bl	8000c84 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002176:	f7fe fd85 	bl	8000c84 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e037      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x46a>
 8002194:	e02f      	b.n	80021f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <HAL_RCC_OscConfig+0x4fc>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe fd72 	bl	8000c84 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fd6e 	bl	8000c84 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e020      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x498>
 80021c2:	e018      	b.n	80021f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e013      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	40007000 	.word	0x40007000
 8002208:	42420060 	.word	0x42420060

0800220c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0d0      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b6a      	ldr	r3, [pc, #424]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d910      	bls.n	8002250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b67      	ldr	r3, [pc, #412]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	4965      	ldr	r1, [pc, #404]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b63      	ldr	r3, [pc, #396]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0b8      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002268:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a58      	ldr	r2, [pc, #352]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002280:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800228a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	494d      	ldr	r1, [pc, #308]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d040      	beq.n	800232c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d115      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e073      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e06b      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ea:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4936      	ldr	r1, [pc, #216]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fcc2 	bl	8000c84 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	e00a      	b.n	800231a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002304:	f7fe fcbe 	bl	8000c84 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e053      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 020c 	and.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	429a      	cmp	r2, r3
 800232a:	d1eb      	bne.n	8002304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d210      	bcs.n	800235c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	4922      	ldr	r1, [pc, #136]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e032      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4916      	ldr	r1, [pc, #88]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	490e      	ldr	r1, [pc, #56]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800239a:	f000 f821 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800239e:	4601      	mov	r1, r0
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	5cd3      	ldrb	r3, [r2, r3]
 80023ae:	fa21 f303 	lsr.w	r3, r1, r3
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1cc>)
 80023b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1d0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fc20 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40022000 	.word	0x40022000
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08002f08 	.word	0x08002f08
 80023d8:	20000010 	.word	0x20000010
 80023dc:	20000014 	.word	0x20000014

080023e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	b490      	push	{r4, r7}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023e6:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023e8:	1d3c      	adds	r4, r7, #4
 80023ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d002      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x40>
 800241a:	2b08      	cmp	r3, #8
 800241c:	d003      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x46>
 800241e:	e02d      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002422:	623b      	str	r3, [r7, #32]
      break;
 8002424:	e02d      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	0c9b      	lsrs	r3, r3, #18
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002432:	4413      	add	r3, r2
 8002434:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002438:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0c5b      	lsrs	r3, r3, #17
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002452:	4413      	add	r3, r2
 8002454:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002458:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <HAL_RCC_GetSysClockFreq+0xbc>)
 800245e:	fb02 f203 	mul.w	r2, r2, r3
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e004      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	623b      	str	r3, [r7, #32]
      break;
 800247a:	e002      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <HAL_RCC_GetSysClockFreq+0xbc>)
 800247e:	623b      	str	r3, [r7, #32]
      break;
 8002480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002482:	6a3b      	ldr	r3, [r7, #32]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bc90      	pop	{r4, r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	08002ef4 	.word	0x08002ef4
 8002494:	08002f04 	.word	0x08002f04
 8002498:	40021000 	.word	0x40021000
 800249c:	007a1200 	.word	0x007a1200
 80024a0:	003d0900 	.word	0x003d0900

080024a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <RCC_Delay+0x34>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <RCC_Delay+0x38>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0a5b      	lsrs	r3, r3, #9
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c0:	bf00      	nop
  }
  while (Delay --);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	60fa      	str	r2, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f9      	bne.n	80024c0 <RCC_Delay+0x1c>
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000010 	.word	0x20000010
 80024dc:	10624dd3 	.word	0x10624dd3

080024e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d07d      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002500:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	4a4b      	ldr	r2, [pc, #300]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002516:	61d3      	str	r3, [r2, #28]
 8002518:	4b49      	ldr	r3, [pc, #292]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002524:	2301      	movs	r3, #1
 8002526:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	4b46      	ldr	r3, [pc, #280]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d118      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002534:	4b43      	ldr	r3, [pc, #268]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a42      	ldr	r2, [pc, #264]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002540:	f7fe fba0 	bl	8000c84 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	e008      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002548:	f7fe fb9c 	bl	8000c84 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e06d      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002566:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d02e      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d027      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002584:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002594:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800259a:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d014      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fb6b 	bl	8000c84 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fb67 	bl	8000c84 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e036      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ee      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4917      	ldr	r1, [pc, #92]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	490b      	ldr	r1, [pc, #44]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
 8002648:	42420440 	.word	0x42420440

0800264c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e041      	b.n	80026e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe f9ec 	bl	8000a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f000 f98e 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_TIM_PWM_Start+0x24>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e022      	b.n	8002756 <HAL_TIM_PWM_Start+0x6a>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d109      	bne.n	800272a <HAL_TIM_PWM_Start+0x3e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	bf14      	ite	ne
 8002722:	2301      	movne	r3, #1
 8002724:	2300      	moveq	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	e015      	b.n	8002756 <HAL_TIM_PWM_Start+0x6a>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d109      	bne.n	8002744 <HAL_TIM_PWM_Start+0x58>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e008      	b.n	8002756 <HAL_TIM_PWM_Start+0x6a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e05e      	b.n	800281c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d104      	bne.n	800276e <HAL_TIM_PWM_Start+0x82>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800276c:	e013      	b.n	8002796 <HAL_TIM_PWM_Start+0xaa>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d104      	bne.n	800277e <HAL_TIM_PWM_Start+0x92>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	e00b      	b.n	8002796 <HAL_TIM_PWM_Start+0xaa>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d104      	bne.n	800278e <HAL_TIM_PWM_Start+0xa2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800278c:	e003      	b.n	8002796 <HAL_TIM_PWM_Start+0xaa>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 faee 	bl	8002d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <HAL_TIM_PWM_Start+0x138>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d107      	bne.n	80027be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_TIM_PWM_Start+0x138>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_TIM_PWM_Start+0xfa>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d009      	beq.n	80027e6 <HAL_TIM_PWM_Start+0xfa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <HAL_TIM_PWM_Start+0x13c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_TIM_PWM_Start+0xfa>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_TIM_PWM_Start+0x140>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d111      	bne.n	800280a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d010      	beq.n	800281a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	e007      	b.n	800281a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800

08002830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002846:	2302      	movs	r3, #2
 8002848:	e0ac      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	f200 809f 	bhi.w	8002998 <HAL_TIM_PWM_ConfigChannel+0x168>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	08002895 	.word	0x08002895
 8002864:	08002999 	.word	0x08002999
 8002868:	08002999 	.word	0x08002999
 800286c:	08002999 	.word	0x08002999
 8002870:	080028d5 	.word	0x080028d5
 8002874:	08002999 	.word	0x08002999
 8002878:	08002999 	.word	0x08002999
 800287c:	08002999 	.word	0x08002999
 8002880:	08002917 	.word	0x08002917
 8002884:	08002999 	.word	0x08002999
 8002888:	08002999 	.word	0x08002999
 800288c:	08002999 	.word	0x08002999
 8002890:	08002957 	.word	0x08002957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f8e8 	bl	8002a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6999      	ldr	r1, [r3, #24]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	619a      	str	r2, [r3, #24]
      break;
 80028d2:	e062      	b.n	800299a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f92e 	bl	8002b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6999      	ldr	r1, [r3, #24]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	619a      	str	r2, [r3, #24]
      break;
 8002914:	e041      	b.n	800299a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f977 	bl	8002c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0208 	orr.w	r2, r2, #8
 8002930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0204 	bic.w	r2, r2, #4
 8002940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69d9      	ldr	r1, [r3, #28]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	61da      	str	r2, [r3, #28]
      break;
 8002954:	e021      	b.n	800299a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f9c1 	bl	8002ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69d9      	ldr	r1, [r3, #28]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	021a      	lsls	r2, r3, #8
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	61da      	str	r2, [r3, #28]
      break;
 8002996:	e000      	b.n	800299a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00b      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d007      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <TIM_Base_SetConfig+0xbc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <TIM_Base_SetConfig+0xbc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	615a      	str	r2, [r3, #20]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f023 0201 	bic.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 0302 	bic.w	r3, r3, #2
 8002ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <TIM_OC1_SetConfig+0xc8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10c      	bne.n	8002ae6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0308 	bic.w	r3, r3, #8
 8002ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <TIM_OC1_SetConfig+0xc8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d111      	bne.n	8002b12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	621a      	str	r2, [r3, #32]
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	f023 0210 	bic.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0320 	bic.w	r3, r3, #32
 8002b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <TIM_OC2_SetConfig+0xd0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10d      	bne.n	8002bb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <TIM_OC2_SetConfig+0xd0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d113      	bne.n	8002be8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	40012c00 	.word	0x40012c00

08002c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <TIM_OC3_SetConfig+0xd0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10d      	bne.n	8002c8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <TIM_OC3_SetConfig+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d113      	bne.n	8002cba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40012c00 	.word	0x40012c00

08002ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <TIM_OC4_SetConfig+0x98>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d109      	bne.n	8002d58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00

08002d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2201      	movs	r2, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e046      	b.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a10      	ldr	r2, [pc, #64]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10c      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800

08002e84 <__libc_init_array>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	2500      	movs	r5, #0
 8002e88:	4e0c      	ldr	r6, [pc, #48]	; (8002ebc <__libc_init_array+0x38>)
 8002e8a:	4c0d      	ldr	r4, [pc, #52]	; (8002ec0 <__libc_init_array+0x3c>)
 8002e8c:	1ba4      	subs	r4, r4, r6
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	42a5      	cmp	r5, r4
 8002e92:	d109      	bne.n	8002ea8 <__libc_init_array+0x24>
 8002e94:	f000 f822 	bl	8002edc <_init>
 8002e98:	2500      	movs	r5, #0
 8002e9a:	4e0a      	ldr	r6, [pc, #40]	; (8002ec4 <__libc_init_array+0x40>)
 8002e9c:	4c0a      	ldr	r4, [pc, #40]	; (8002ec8 <__libc_init_array+0x44>)
 8002e9e:	1ba4      	subs	r4, r4, r6
 8002ea0:	10a4      	asrs	r4, r4, #2
 8002ea2:	42a5      	cmp	r5, r4
 8002ea4:	d105      	bne.n	8002eb2 <__libc_init_array+0x2e>
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
 8002ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eac:	4798      	blx	r3
 8002eae:	3501      	adds	r5, #1
 8002eb0:	e7ee      	b.n	8002e90 <__libc_init_array+0xc>
 8002eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eb6:	4798      	blx	r3
 8002eb8:	3501      	adds	r5, #1
 8002eba:	e7f2      	b.n	8002ea2 <__libc_init_array+0x1e>
 8002ebc:	08002f18 	.word	0x08002f18
 8002ec0:	08002f18 	.word	0x08002f18
 8002ec4:	08002f18 	.word	0x08002f18
 8002ec8:	08002f1c 	.word	0x08002f1c

08002ecc <memset>:
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4402      	add	r2, r0
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d100      	bne.n	8002ed6 <memset+0xa>
 8002ed4:	4770      	bx	lr
 8002ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eda:	e7f9      	b.n	8002ed0 <memset+0x4>

08002edc <_init>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr

08002ee8 <_fini>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	bf00      	nop
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr
